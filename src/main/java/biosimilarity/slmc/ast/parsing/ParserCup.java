
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 11 13:33:50 CST 2013
//----------------------------------------------------

package biosimilarity.slmc.ast.parsing;

import biosimilarity.slmc.*;
import biosimilarity.slmc.ast.*;
import biosimilarity.slmc.ast.cc.*;
import biosimilarity.slmc.ast.ml.*;
import biosimilarity.slmc.ast.pc.*;
import biosimilarity.slmc.ast.sr.*;
import biosimilarity.slmc.ast.ss.*;
import scala.collection.immutable.List;
import scala.collection.immutable.List$;
import scala.collection.immutable.$colon$colon;
import scala.Tuple2;
import scala.Tuple3;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 11 13:33:50 CST 2013
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\304\000\002\002\004\000\002\002\002\000\002\002" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\006\000\002\003\005\000" +
    "\002\003\006\000\002\003\006\000\002\003\005\000\002" +
    "\003\006\000\002\003\006\000\002\003\005\000\002\003" +
    "\004\000\002\003\005\000\002\003\004\000\002\003\004" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\004\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\004\007\000\002\004\007" +
    "\000\002\004\005\000\002\004\004\000\002\005\010\000" +
    "\002\005\011\000\002\005\010\000\002\005\010\000\002" +
    "\005\007\000\002\005\005\000\002\005\004\000\002\006" +
    "\002\000\002\006\010\000\002\006\010\000\002\006\006" +
    "\000\002\007\002\000\002\007\004\000\002\007\005\000" +
    "\002\007\004\000\002\010\002\000\002\010\005\000\002" +
    "\010\004\000\002\011\003\000\002\011\005\000\002\011" +
    "\005\000\002\012\003\000\002\012\004\000\002\012\006" +
    "\000\002\012\011\000\002\012\007\000\002\012\011\000" +
    "\002\012\007\000\002\012\005\000\002\012\003\000\002" +
    "\012\011\000\002\012\011\000\002\012\006\000\002\012" +
    "\005\000\002\013\011\000\002\013\007\000\002\013\011" +
    "\000\002\013\007\000\002\013\005\000\002\013\003\000" +
    "\002\013\011\000\002\013\011\000\002\014\003\000\002" +
    "\014\005\000\002\015\002\000\002\015\005\000\002\016" +
    "\002\000\002\016\003\000\002\016\005\000\002\017\002" +
    "\000\002\017\003\000\002\017\005\000\002\020\002\000" +
    "\002\020\003\000\002\020\005\000\002\021\003\000\002" +
    "\021\005\000\002\022\006\000\002\022\006\000\002\022" +
    "\005\000\002\022\004\000\002\023\010\000\002\023\006" +
    "\000\002\023\006\000\002\023\003\000\002\023\005\000" +
    "\002\024\003\000\002\024\005\000\002\025\003\000\002" +
    "\025\005\000\002\026\002\000\002\026\003\000\002\026" +
    "\005\000\002\027\003\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\004\000\002\030\004\000\002\030\004\000\002\030\004" +
    "\000\002\030\004\000\002\030\003\000\002\030\005\000" +
    "\002\030\005\000\002\030\006\000\002\030\003\000\002" +
    "\030\004\000\002\030\006\000\002\030\006\000\002\030" +
    "\006\000\002\030\006\000\002\030\004\000\002\030\006" +
    "\000\002\030\006\000\002\030\006\000\002\030\006\000" +
    "\002\030\007\000\002\030\007\000\002\030\007\000\002" +
    "\030\007\000\002\030\006\000\002\030\006\000\002\030" +
    "\006\000\002\030\006\000\002\030\006\000\002\030\006" +
    "\000\002\030\006\000\002\030\006\000\002\030\006\000" +
    "\002\030\006\000\002\030\012\000\002\030\006\000\002" +
    "\030\012\000\002\030\006\000\002\030\004\000\002\030" +
    "\004\000\002\030\004\000\002\030\004\000\002\030\004" +
    "\000\002\030\005\000\002\031\005\000\002\032\002\000" +
    "\002\032\003\000\002\032\003\000\002\032\005\000\002" +
    "\032\005\000\002\033\007\000\002\033\007\000\002\034" +
    "\002\000\002\034\003\000\002\035\003\000\002\035\005" +
    "\000\002\036\003\000\002\036\004\000\002\036\007\000" +
    "\002\036\003\000\002\036\011\000\002\036\012\000\002" +
    "\036\006\000\002\036\010\000\002\036\010\000\002\036" +
    "\006\000\002\036\010\000\002\036\014\000\002\036\014" +
    "\000\002\036\005\000\002\037\011\000\002\037\012\000" +
    "\002\040\003\000\002\040\005\000\002\041\003\000\002" +
    "\041\005\000\002\041\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01df\000\042\002\000\003\022\031\016\034\024\035" +
    "\015\036\026\042\013\043\023\044\012\047\021\050\011" +
    "\053\010\054\020\055\004\056\006\122\007\001\002\000" +
    "\004\122\u01e1\001\002\000\004\122\u01e0\001\002\000\004" +
    "\122\u01df\001\002\000\042\002\ufffe\003\ufffe\031\ufffe\034" +
    "\ufffe\035\ufffe\036\ufffe\042\ufffe\043\ufffe\044\ufffe\047\ufffe" +
    "\050\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\122\ufffe\001" +
    "\002\000\004\122\u01de\001\002\000\006\125\u01da\126\u01db" +
    "\001\002\000\010\045\u01d5\046\u01d6\122\u01d7\001\002\000" +
    "\004\127\u01d3\001\002\000\004\122\u01d2\001\002\000\006" +
    "\003\u01c4\126\u01c5\001\002\000\006\003\u010a\125\u010b\001" +
    "\002\000\004\002\u0109\001\002\000\004\127\u0107\001\002" +
    "\000\006\051\u0104\052\u0103\001\002\000\004\122\u0102\001" +
    "\002\000\004\122\u0101\001\002\000\012\003\054\057\053" +
    "\060\055\126\056\001\002\000\004\122\052\001\002\000" +
    "\012\037\032\040\031\041\033\122\034\001\002\000\042" +
    "\002\000\003\022\031\016\034\024\035\015\036\026\042" +
    "\013\043\023\044\012\047\021\050\011\053\010\054\020" +
    "\055\004\056\006\122\007\001\002\000\004\002\uffff\001" +
    "\002\000\010\045\045\046\047\122\046\001\002\000\006" +
    "\122\042\130\043\001\002\000\010\045\035\046\037\122" +
    "\036\001\002\000\042\002\ufff2\003\ufff2\031\ufff2\034\ufff2" +
    "\035\ufff2\036\ufff2\042\ufff2\043\ufff2\044\ufff2\047\ufff2\050" +
    "\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\122\ufff2\001\002" +
    "\000\004\122\041\001\002\000\042\002\ufff3\003\ufff3\031" +
    "\ufff3\034\ufff3\035\ufff3\036\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\047\ufff3\050\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\122" +
    "\ufff3\001\002\000\004\122\040\001\002\000\042\002\ufff4" +
    "\003\ufff4\031\ufff4\034\ufff4\035\ufff4\036\ufff4\042\ufff4\043" +
    "\ufff4\044\ufff4\047\ufff4\050\ufff4\053\ufff4\054\ufff4\055\ufff4" +
    "\056\ufff4\122\ufff4\001\002\000\042\002\ufff5\003\ufff5\031" +
    "\ufff5\034\ufff5\035\ufff5\036\ufff5\042\ufff5\043\ufff5\044\ufff5" +
    "\047\ufff5\050\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\122" +
    "\ufff5\001\002\000\042\002\ufff9\003\ufff9\031\ufff9\034\ufff9" +
    "\035\ufff9\036\ufff9\042\ufff9\043\ufff9\044\ufff9\047\ufff9\050" +
    "\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\122\ufff9\001\002" +
    "\000\004\122\044\001\002\000\042\002\ufffa\003\ufffa\031" +
    "\ufffa\034\ufffa\035\ufffa\036\ufffa\042\ufffa\043\ufffa\044\ufffa" +
    "\047\ufffa\050\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\122" +
    "\ufffa\001\002\000\004\122\051\001\002\000\042\002\ufff6" +
    "\003\ufff6\031\ufff6\034\ufff6\035\ufff6\036\ufff6\042\ufff6\043" +
    "\ufff6\044\ufff6\047\ufff6\050\ufff6\053\ufff6\054\ufff6\055\ufff6" +
    "\056\ufff6\122\ufff6\001\002\000\004\122\050\001\002\000" +
    "\042\002\ufff7\003\ufff7\031\ufff7\034\ufff7\035\ufff7\036\ufff7" +
    "\042\ufff7\043\ufff7\044\ufff7\047\ufff7\050\ufff7\053\ufff7\054" +
    "\ufff7\055\ufff7\056\ufff7\122\ufff7\001\002\000\042\002\ufff8" +
    "\003\ufff8\031\ufff8\034\ufff8\035\ufff8\036\ufff8\042\ufff8\043" +
    "\ufff8\044\ufff8\047\ufff8\050\ufff8\053\ufff8\054\ufff8\055\ufff8" +
    "\056\ufff8\122\ufff8\001\002\000\042\002\ufffb\003\ufffb\031" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\042\ufffb\043\ufffb\044\ufffb" +
    "\047\ufffb\050\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\122" +
    "\ufffb\001\002\000\004\126\243\001\002\000\004\122\uffd9" +
    "\001\002\000\004\126\236\001\002\000\010\003\057\111" +
    "\060\114\uffd4\001\002\000\004\122\uffda\001\002\000\010" +
    "\003\227\112\232\125\231\001\002\000\004\114\062\001" +
    "\002\000\024\003\071\007\072\030\075\032\064\073\067" +
    "\077\066\111\065\125\073\126\074\001\002\000\014\003" +
    "\uffcd\011\uffcd\072\uffcd\112\uffcd\122\uffcd\001\002\000\004" +
    "\125\222\001\002\000\022\007\072\030\075\032\064\073" +
    "\067\077\066\111\065\125\073\126\074\001\002\000\004" +
    "\125\204\001\002\000\016\003\uffca\011\uffca\072\uffca\106" +
    "\uffca\112\uffca\122\uffca\001\002\000\012\003\171\011\uffd8" +
    "\072\172\122\uffd8\001\002\000\004\122\uffdb\001\002\000" +
    "\004\105\126\001\002\000\006\102\107\103\110\001\002" +
    "\000\020\003\uffb3\011\uffb3\072\uffb3\106\uffb3\111\101\112" +
    "\uffb3\122\uffb3\001\002\000\020\003\uffc2\011\uffc2\072\uffc2" +
    "\104\076\106\uffc2\112\uffc2\122\uffc2\001\002\000\022\007" +
    "\072\030\075\032\064\073\067\077\066\111\065\125\073" +
    "\126\074\001\002\000\016\003\uffc3\011\uffc3\072\uffc3\106" +
    "\uffc3\112\uffc3\122\uffc3\001\002\000\016\003\uffc9\011\uffc9" +
    "\072\uffc9\106\uffc9\112\uffc9\122\uffc9\001\002\000\010\112" +
    "\uffab\113\uffab\125\102\001\002\000\006\112\uffaa\113\uffaa" +
    "\001\002\000\006\112\105\113\104\001\002\000\004\125" +
    "\106\001\002\000\020\003\uffb2\011\uffb2\067\uffb2\072\uffb2" +
    "\106\uffb2\112\uffb2\122\uffb2\001\002\000\006\112\uffa9\113" +
    "\uffa9\001\002\000\004\111\121\001\002\000\004\111\111" +
    "\001\002\000\010\112\uffae\113\uffae\125\112\001\002\000" +
    "\006\112\uffad\113\uffad\001\002\000\006\112\115\113\114" +
    "\001\002\000\004\125\120\001\002\000\020\003\uffc6\011" +
    "\uffc6\072\uffc6\104\116\106\uffc6\112\uffc6\122\uffc6\001\002" +
    "\000\022\007\072\030\075\032\064\073\067\077\066\111" +
    "\065\125\073\126\074\001\002\000\016\003\uffc7\011\uffc7" +
    "\072\uffc7\106\uffc7\112\uffc7\122\uffc7\001\002\000\006\112" +
    "\uffac\113\uffac\001\002\000\010\112\uffab\113\uffab\125\102" +
    "\001\002\000\006\112\123\113\104\001\002\000\020\003" +
    "\uffc4\011\uffc4\072\uffc4\104\124\106\uffc4\112\uffc4\122\uffc4" +
    "\001\002\000\022\007\072\030\075\032\064\073\067\077" +
    "\066\111\065\125\073\126\074\001\002\000\016\003\uffc5" +
    "\011\uffc5\072\uffc5\106\uffc5\112\uffc5\122\uffc5\001\002\000" +
    "\010\030\130\077\127\125\132\001\002\000\004\125\155" +
    "\001\002\000\010\104\153\106\uffb8\122\uffb8\001\002\000" +
    "\006\106\151\122\150\001\002\000\006\102\134\103\135" +
    "\001\002\000\006\106\uffb5\122\uffb5\001\002\000\004\111" +
    "\143\001\002\000\004\111\136\001\002\000\010\112\uffae" +
    "\113\uffae\125\112\001\002\000\006\112\140\113\114\001" +
    "\002\000\010\104\141\106\uffbc\122\uffbc\001\002\000\022" +
    "\007\072\030\075\032\064\073\067\077\066\111\065\125" +
    "\073\126\074\001\002\000\006\106\uffbd\122\uffbd\001\002" +
    "\000\010\112\uffab\113\uffab\125\102\001\002\000\006\112" +
    "\145\113\104\001\002\000\010\104\146\106\uffba\122\uffba" +
    "\001\002\000\022\007\072\030\075\032\064\073\067\077" +
    "\066\111\065\125\073\126\074\001\002\000\006\106\uffbb" +
    "\122\uffbb\001\002\000\010\030\130\077\127\125\132\001" +
    "\002\000\016\003\uffbf\011\uffbf\072\uffbf\106\uffbf\112\uffbf" +
    "\122\uffbf\001\002\000\006\106\uffb4\122\uffb4\001\002\000" +
    "\022\007\072\030\075\032\064\073\067\077\066\111\065" +
    "\125\073\126\074\001\002\000\006\106\uffb9\122\uffb9\001" +
    "\002\000\006\114\156\116\157\001\002\000\004\125\164" +
    "\001\002\000\004\125\160\001\002\000\004\100\161\001" +
    "\002\000\004\104\162\001\002\000\022\007\072\030\075" +
    "\032\064\073\067\077\066\111\065\125\073\126\074\001" +
    "\002\000\006\106\uffb6\122\uffb6\001\002\000\004\100\165" +
    "\001\002\000\004\104\166\001\002\000\022\007\072\030" +
    "\075\032\064\073\067\077\066\111\065\125\073\126\074" +
    "\001\002\000\006\106\uffb7\122\uffb7\001\002\000\006\011" +
    "\175\122\uffdd\001\002\000\004\122\uffdc\001\002\000\024" +
    "\003\174\007\072\030\075\032\064\073\067\077\066\111" +
    "\065\125\073\126\074\001\002\000\014\003\uffcc\011\uffcc" +
    "\072\uffcc\112\uffcc\122\uffcc\001\002\000\014\003\uffcb\011" +
    "\uffcb\072\uffcb\112\uffcb\122\uffcb\001\002\000\004\126\176" +
    "\001\002\000\010\003\177\111\060\114\uffd4\001\002\000" +
    "\006\011\uffd5\122\uffd5\001\002\000\004\114\201\001\002" +
    "\000\024\003\203\007\072\030\075\032\064\073\067\077" +
    "\066\111\065\125\073\126\074\001\002\000\010\011\uffd7" +
    "\072\172\122\uffd7\001\002\000\006\011\uffd6\122\uffd6\001" +
    "\002\000\006\114\205\116\206\001\002\000\004\125\213" +
    "\001\002\000\004\125\207\001\002\000\004\100\210\001" +
    "\002\000\004\104\211\001\002\000\022\007\072\030\075" +
    "\032\064\073\067\077\066\111\065\125\073\126\074\001" +
    "\002\000\016\003\uffc0\011\uffc0\072\uffc0\106\uffc0\112\uffc0" +
    "\122\uffc0\001\002\000\004\100\214\001\002\000\004\104" +
    "\215\001\002\000\022\007\072\030\075\032\064\073\067" +
    "\077\066\111\065\125\073\126\074\001\002\000\016\003" +
    "\uffc1\011\uffc1\072\uffc1\106\uffc1\112\uffc1\122\uffc1\001\002" +
    "\000\006\072\172\112\220\001\002\000\016\003\uffbe\011" +
    "\uffbe\072\uffbe\106\uffbe\112\uffbe\122\uffbe\001\002\000\006" +
    "\033\224\113\223\001\002\000\006\033\uffa8\113\uffa8\001" +
    "\002\000\004\125\226\001\002\000\022\007\072\030\075" +
    "\032\064\073\067\077\066\111\065\125\073\126\074\001" +
    "\002\000\016\003\uffc8\011\uffc8\072\uffc8\106\uffc8\112\uffc8" +
    "\122\uffc8\001\002\000\006\033\uffa7\113\uffa7\001\002\000" +
    "\004\114\uffd1\001\002\000\006\112\234\113\233\001\002" +
    "\000\006\112\uff9d\113\uff9d\001\002\000\004\114\uffd3\001" +
    "\002\000\004\125\235\001\002\000\004\114\uffd2\001\002" +
    "\000\006\112\uff9c\113\uff9c\001\002\000\006\111\060\114" +
    "\uffd4\001\002\000\004\114\240\001\002\000\022\007\072" +
    "\030\075\032\064\073\067\077\066\111\065\125\073\126" +
    "\074\001\002\000\010\011\uffd8\072\172\122\uffd8\001\002" +
    "\000\006\011\175\122\uffde\001\002\000\006\111\060\114" +
    "\uffd4\001\002\000\004\114\245\001\002\000\030\032\250" +
    "\061\263\062\246\063\253\064\256\065\254\070\255\071" +
    "\261\111\251\125\257\126\262\001\002\000\004\125\374" +
    "\001\002\000\006\072\362\122\uffdf\001\002\000\004\125" +
    "\367\001\002\000\030\032\250\061\263\062\246\063\253" +
    "\064\256\065\254\070\255\071\261\111\251\125\257\126" +
    "\262\001\002\000\012\072\uff40\106\uff40\112\uff40\122\uff40" +
    "\001\002\000\004\125\356\001\002\000\004\111\336\001" +
    "\002\000\004\111\331\001\002\000\004\105\321\001\002" +
    "\000\010\102\270\103\272\123\271\001\002\000\014\067" +
    "\uff4f\072\uff4f\106\uff4f\112\uff4f\122\uff4f\001\002\000\014" +
    "\067\uff52\072\uff52\106\uff52\112\uff52\122\uff52\001\002\000" +
    "\016\067\uffb3\072\uffb3\106\uffb3\111\101\112\uffb3\122\uffb3" +
    "\001\002\000\004\125\264\001\002\000\004\117\265\001" +
    "\002\000\030\032\250\061\263\062\246\063\253\064\256" +
    "\065\254\070\255\071\261\111\251\125\257\126\262\001" +
    "\002\000\014\067\uff4c\072\uff4c\106\uff4c\112\uff4c\122\uff4c" +
    "\001\002\000\014\067\uff51\072\uff51\106\uff51\112\uff51\122" +
    "\uff51\001\002\000\004\111\314\001\002\000\006\102\300" +
    "\103\301\001\002\000\004\111\273\001\002\000\010\112" +
    "\uffae\113\uffae\125\112\001\002\000\006\112\275\113\114" +
    "\001\002\000\004\104\276\001\002\000\030\032\250\061" +
    "\263\062\246\063\253\064\256\065\254\070\255\071\261" +
    "\111\251\125\257\126\262\001\002\000\014\067\uff44\072" +
    "\uff44\106\uff44\112\uff44\122\uff44\001\002\000\004\111\307" +
    "\001\002\000\004\111\302\001\002\000\010\112\uffae\113" +
    "\uffae\125\112\001\002\000\006\112\304\113\114\001\002" +
    "\000\004\104\305\001\002\000\030\032\250\061\263\062" +
    "\246\063\253\064\256\065\254\070\255\071\261\111\251" +
    "\125\257\126\262\001\002\000\014\067\uff43\072\uff43\106" +
    "\uff43\112\uff43\122\uff43\001\002\000\010\112\uffab\113\uffab" +
    "\125\102\001\002\000\006\112\311\113\104\001\002\000" +
    "\004\104\312\001\002\000\030\032\250\061\263\062\246" +
    "\063\253\064\256\065\254\070\255\071\261\111\251\125" +
    "\257\126\262\001\002\000\014\067\uff4d\072\uff4d\106\uff4d" +
    "\112\uff4d\122\uff4d\001\002\000\010\112\uffab\113\uffab\125" +
    "\102\001\002\000\006\112\316\113\104\001\002\000\004" +
    "\104\317\001\002\000\030\032\250\061\263\062\246\063" +
    "\253\064\256\065\254\070\255\071\261\111\251\125\257" +
    "\126\262\001\002\000\014\067\uff4e\072\uff4e\106\uff4e\112" +
    "\uff4e\122\uff4e\001\002\000\004\125\322\001\002\000\006" +
    "\103\272\123\330\001\002\000\006\106\uff42\122\uff42\001" +
    "\002\000\006\106\326\122\325\001\002\000\004\125\322" +
    "\001\002\000\014\067\uff49\072\uff49\106\uff49\112\uff49\122" +
    "\uff49\001\002\000\006\106\uff41\122\uff41\001\002\000\004" +
    "\103\301\001\002\000\004\125\332\001\002\000\004\112" +
    "\333\001\002\000\004\104\334\001\002\000\030\032\250" +
    "\061\263\062\246\063\253\064\256\065\254\070\255\071" +
    "\261\111\251\125\257\126\262\001\002\000\014\067\uff48" +
    "\072\uff48\106\uff48\112\uff48\122\uff48\001\002\000\004\125" +
    "\337\001\002\000\006\114\340\116\341\001\002\000\004" +
    "\125\350\001\002\000\004\125\342\001\002\000\004\112" +
    "\343\001\002\000\004\066\344\001\002\000\030\032\250" +
    "\061\263\062\246\063\253\064\256\065\254\070\255\071" +
    "\261\111\251\125\257\126\262\001\002\000\004\067\346" +
    "\001\002\000\030\032\250\061\263\062\246\063\253\064" +
    "\256\065\254\070\255\071\261\111\251\125\257\126\262" +
    "\001\002\000\014\067\uff46\072\uff46\106\uff46\112\uff46\122" +
    "\uff46\001\002\000\004\112\351\001\002\000\004\066\352" +
    "\001\002\000\030\032\250\061\263\062\246\063\253\064" +
    "\256\065\254\070\255\071\261\111\251\125\257\126\262" +
    "\001\002\000\004\067\354\001\002\000\030\032\250\061" +
    "\263\062\246\063\253\064\256\065\254\070\255\071\261" +
    "\111\251\125\257\126\262\001\002\000\014\067\uff47\072" +
    "\uff47\106\uff47\112\uff47\122\uff47\001\002\000\004\105\357" +
    "\001\002\000\030\032\250\061\263\062\246\063\253\064" +
    "\256\065\254\070\255\071\261\111\251\125\257\126\262" +
    "\001\002\000\006\072\362\106\361\001\002\000\014\067" +
    "\uff50\072\uff50\106\uff50\112\uff50\122\uff50\001\002\000\032" +
    "\003\364\032\250\061\263\062\246\063\253\064\256\065" +
    "\254\070\255\071\261\111\251\125\257\126\262\001\002" +
    "\000\012\072\uff3f\106\uff3f\112\uff3f\122\uff3f\001\002\000" +
    "\012\072\uff3e\106\uff3e\112\uff3e\122\uff3e\001\002\000\006" +
    "\072\362\112\366\001\002\000\014\067\uff45\072\uff45\106" +
    "\uff45\112\uff45\122\uff45\001\002\000\004\104\370\001\002" +
    "\000\004\125\371\001\002\000\004\074\372\001\002\000" +
    "\030\032\250\061\263\062\246\063\253\064\256\065\254" +
    "\070\255\071\261\111\251\125\257\126\262\001\002\000" +
    "\014\067\uff4b\072\uff4b\106\uff4b\112\uff4b\122\uff4b\001\002" +
    "\000\004\104\375\001\002\000\004\125\376\001\002\000" +
    "\004\074\377\001\002\000\030\032\250\061\263\062\246" +
    "\063\253\064\256\065\254\070\255\071\261\111\251\125" +
    "\257\126\262\001\002\000\014\067\uff4a\072\uff4a\106\uff4a" +
    "\112\uff4a\122\uff4a\001\002\000\042\002\ufff0\003\ufff0\031" +
    "\ufff0\034\ufff0\035\ufff0\036\ufff0\042\ufff0\043\ufff0\044\ufff0" +
    "\047\ufff0\050\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\122" +
    "\ufff0\001\002\000\042\002\uffe4\003\uffe4\031\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\042\uffe4\043\uffe4\044\uffe4\047\uffe4\050" +
    "\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\122\uffe4\001\002" +
    "\000\004\122\u0106\001\002\000\004\122\u0105\001\002\000" +
    "\042\002\uffe7\003\uffe7\031\uffe7\034\uffe7\035\uffe7\036\uffe7" +
    "\042\uffe7\043\uffe7\044\uffe7\047\uffe7\050\uffe7\053\uffe7\054" +
    "\uffe7\055\uffe7\056\uffe7\122\uffe7\001\002\000\042\002\uffe8" +
    "\003\uffe8\031\uffe8\034\uffe8\035\uffe8\036\uffe8\042\uffe8\043" +
    "\uffe8\044\uffe8\047\uffe8\050\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\122\uffe8\001\002\000\004\122\u0108\001\002\000" +
    "\042\002\uffec\003\uffec\031\uffec\034\uffec\035\uffec\036\uffec" +
    "\042\uffec\043\uffec\044\uffec\047\uffec\050\uffec\053\uffec\054" +
    "\uffec\055\uffec\056\uffec\122\uffec\001\002\000\004\002\001" +
    "\001\002\000\004\122\uffa3\001\002\000\010\003\uff9f\111" +
    "\u01b8\114\uff9f\001\002\000\006\003\u010e\114\u010d\001\002" +
    "\000\070\003\u0121\004\u0119\005\u0120\006\u0127\010\u0116\013" +
    "\u012b\014\u0123\015\u0126\016\u0117\017\u0122\020\u0111\021\u0114" +
    "\022\u011e\023\u011a\024\u011d\025\u0118\026\u0115\027\u0128\073" +
    "\u0124\075\u010f\076\u011b\077\u0129\107\u0125\111\u012a\125\u0113" +
    "\126\u011f\130\u0112\001\002\000\004\122\uffa4\001\002\000" +
    "\022\030\u0158\073\u01a2\076\uff56\101\u01a0\102\u01a3\103\u01a1" +
    "\125\u01a4\130\u019e\001\002\000\020\011\u014a\012\u014c\072" +
    "\u014d\110\u014e\117\u0149\120\u0148\122\uffa6\001\002\000\004" +
    "\125\u019b\001\002\000\024\011\uff8b\012\uff8b\072\uff8b\110" +
    "\uff8b\112\uff8b\113\uff8b\117\uff8b\120\uff8b\122\uff8b\001\002" +
    "\000\032\011\uff81\012\uff81\072\uff81\110\uff81\111\u0192\112" +
    "\uff81\113\uff81\115\u0191\116\u0193\117\uff81\120\uff81\122\uff81" +
    "\001\002\000\004\126\u0190\001\002\000\066\004\u0119\005" +
    "\u0120\006\u0127\010\u0116\013\u012b\014\u0123\015\u0126\016\u0117" +
    "\017\u0122\020\u0111\021\u0114\022\u011e\023\u011a\024\u011d\025" +
    "\u0118\026\u0115\027\u0128\073\u0124\075\u010f\076\u011b\077\u0129" +
    "\107\u0125\111\u012a\125\u0113\126\u011f\130\u0112\001\002\000" +
    "\066\004\u0119\005\u0120\006\u0127\010\u0116\013\u012b\014\u0123" +
    "\015\u0126\016\u0117\017\u0122\020\u0111\021\u0114\022\u011e\023" +
    "\u011a\024\u011d\025\u0118\026\u0115\027\u0128\073\u0124\075\u010f" +
    "\076\u011b\077\u0129\107\u0125\111\u012a\125\u0113\126\u011f\130" +
    "\u0112\001\002\000\004\125\u018b\001\002\000\066\004\u0119" +
    "\005\u0120\006\u0127\010\u0116\013\u012b\014\u0123\015\u0126\016" +
    "\u0117\017\u0122\020\u0111\021\u0114\022\u011e\023\u011a\024\u011d" +
    "\025\u0118\026\u0115\027\u0128\073\u0124\075\u010f\076\u011b\077" +
    "\u0129\107\u0125\111\u012a\125\u0113\126\u011f\130\u0112\001\002" +
    "\000\024\011\uff8f\012\uff8f\072\uff8f\110\uff8f\112\uff8f\113" +
    "\uff8f\117\uff8f\120\uff8f\122\uff8f\001\002\000\066\004\u0119" +
    "\005\u0120\006\u0127\010\u0116\013\u012b\014\u0123\015\u0126\016" +
    "\u0117\017\u0122\020\u0111\021\u0114\022\u011e\023\u011a\024\u011d" +
    "\025\u0118\026\u0115\027\u0128\073\u0124\075\u010f\076\u011b\077" +
    "\u0129\107\u0125\111\u012a\125\u0113\126\u011f\130\u0112\001\002" +
    "\000\006\073\u0187\130\u0188\001\002\000\024\011\uff96\012" +
    "\uff96\072\uff96\110\uff96\112\uff96\113\uff96\117\uff96\120\uff96" +
    "\122\uff96\001\002\000\066\004\u0119\005\u0120\006\u0127\010" +
    "\u0116\013\u012b\014\u0123\015\u0126\016\u0117\017\u0122\020\u0111" +
    "\021\u0114\022\u011e\023\u011a\024\u011d\025\u0118\026\u0115\027" +
    "\u0128\073\u0124\075\u010f\076\u011b\077\u0129\107\u0125\111\u012a" +
    "\125\u0113\126\u011f\130\u0112\001\002\000\004\126\u0185\001" +
    "\002\000\026\011\uff85\012\uff85\072\uff85\110\uff85\111\u0133" +
    "\112\uff85\113\uff85\117\uff85\120\uff85\122\uff85\001\002\000" +
    "\024\011\uff8e\012\uff8e\072\uff8e\110\uff8e\112\uff8e\113\uff8e" +
    "\117\uff8e\120\uff8e\122\uff8e\001\002\000\004\122\uffa5\001" +
    "\002\000\004\125\u0181\001\002\000\004\125\u017e\001\002" +
    "\000\024\011\uff8c\012\uff8c\072\uff8c\110\uff8c\112\uff8c\113" +
    "\uff8c\117\uff8c\120\uff8c\122\uff8c\001\002\000\004\125\u017d" +
    "\001\002\000\004\125\u017a\001\002\000\024\011\uff8d\012" +
    "\uff8d\072\uff8d\110\uff8d\112\uff8d\113\uff8d\117\uff8d\120\uff8d" +
    "\122\uff8d\001\002\000\066\004\u0119\005\u0120\006\u0127\010" +
    "\u0116\013\u012b\014\u0123\015\u0126\016\u0117\017\u0122\020\u0111" +
    "\021\u0114\022\u011e\023\u011a\024\u011d\025\u0118\026\u0115\027" +
    "\u0128\073\u0124\075\u010f\076\u011b\077\u0129\107\u0125\111\u012a" +
    "\125\u0113\126\u011f\130\u0112\001\002\000\016\030\u0158\100" +
    "\uff56\101\u0156\102\u0155\103\u015b\125\u0159\001\002\000\066" +
    "\004\u0119\005\u0120\006\u0127\010\u0116\013\u012b\014\u0123\015" +
    "\u0126\016\u0117\017\u0122\020\u0111\021\u0130\022\u0131\023\u011a" +
    "\024\u011d\025\u0118\026\u0115\027\u0128\073\u0124\075\u010f\076" +
    "\u011b\077\u0129\107\u0125\111\u012a\125\u0113\126\u011f\130\u0112" +
    "\001\002\000\004\125\u012c\001\002\000\004\104\u012d\001" +
    "\002\000\066\004\u0119\005\u0120\006\u0127\010\u0116\013\u012b" +
    "\014\u0123\015\u0126\016\u0117\017\u0122\020\u0111\021\u0114\022" +
    "\u011e\023\u011a\024\u011d\025\u0118\026\u0115\027\u0128\073\u0124" +
    "\075\u010f\076\u011b\077\u0129\107\u0125\111\u012a\125\u0113\126" +
    "\u011f\130\u0112\001\002\000\024\011\uff7f\012\uff7f\072\uff7f" +
    "\110\uff7f\112\uff7f\113\uff7f\117\uff7f\120\uff7f\122\uff7f\001" +
    "\002\000\020\011\u014a\012\u014c\072\u014d\110\u014e\112\u014b" +
    "\117\u0149\120\u0148\001\002\000\004\126\u0140\001\002\000" +
    "\004\126\u0132\001\002\000\006\104\u0135\111\u0133\001\002" +
    "\000\010\112\uff99\113\uff99\125\u013c\001\002\000\004\104" +
    "\u0137\001\002\000\066\004\u0119\005\u0120\006\u0127\010\u0116" +
    "\013\u012b\014\u0123\015\u0126\016\u0117\017\u0122\020\u0111\021" +
    "\u0114\022\u011e\023\u011a\024\u011d\025\u0118\026\u0115\027\u0128" +
    "\073\u0124\075\u010f\076\u011b\077\u0129\107\u0125\111\u012a\125" +
    "\u0113\126\u011f\130\u0112\001\002\000\024\011\uff65\012\uff65" +
    "\072\uff65\110\uff65\112\uff65\113\uff65\117\uff65\120\uff65\122" +
    "\uff65\001\002\000\066\004\u0119\005\u0120\006\u0127\010\u0116" +
    "\013\u012b\014\u0123\015\u0126\016\u0117\017\u0122\020\u0111\021" +
    "\u0114\022\u011e\023\u011a\024\u011d\025\u0118\026\u0115\027\u0128" +
    "\073\u0124\075\u010f\076\u011b\077\u0129\107\u0125\111\u012a\125" +
    "\u0113\126\u011f\130\u0112\001\002\000\004\112\u0139\001\002" +
    "\000\004\111\u0133\001\002\000\024\011\uff66\012\uff66\072" +
    "\uff66\110\uff66\112\uff66\113\uff66\117\uff66\120\uff66\122\uff66" +
    "\001\002\000\006\112\u013e\113\u013d\001\002\000\006\112" +
    "\uff98\113\uff98\001\002\000\004\125\u013f\001\002\000\026" +
    "\011\uff5e\012\uff5e\072\uff5e\104\uff5e\110\uff5e\112\uff5e\113" +
    "\uff5e\117\uff5e\120\uff5e\122\uff5e\001\002\000\006\112\uff97" +
    "\113\uff97\001\002\000\006\104\u0142\111\u0133\001\002\000" +
    "\004\104\u0144\001\002\000\066\004\u0119\005\u0120\006\u0127" +
    "\010\u0116\013\u012b\014\u0123\015\u0126\016\u0117\017\u0122\020" +
    "\u0111\021\u0114\022\u011e\023\u011a\024\u011d\025\u0118\026\u0115" +
    "\027\u0128\073\u0124\075\u010f\076\u011b\077\u0129\107\u0125\111" +
    "\u012a\125\u0113\126\u011f\130\u0112\001\002\000\024\011\uff67" +
    "\012\uff67\072\uff67\110\uff67\112\uff67\113\uff67\117\uff67\120" +
    "\uff67\122\uff67\001\002\000\066\004\u0119\005\u0120\006\u0127" +
    "\010\u0116\013\u012b\014\u0123\015\u0126\016\u0117\017\u0122\020" +
    "\u0111\021\u0114\022\u011e\023\u011a\024\u011d\025\u0118\026\u0115" +
    "\027\u0128\073\u0124\075\u010f\076\u011b\077\u0129\107\u0125\111" +
    "\u012a\125\u0113\126\u011f\130\u0112\001\002\000\004\112\u0146" +
    "\001\002\000\004\111\u0133\001\002\000\024\011\uff68\012" +
    "\uff68\072\uff68\110\uff68\112\uff68\113\uff68\117\uff68\120\uff68" +
    "\122\uff68\001\002\000\066\004\u0119\005\u0120\006\u0127\010" +
    "\u0116\013\u012b\014\u0123\015\u0126\016\u0117\017\u0122\020\u0111" +
    "\021\u0114\022\u011e\023\u011a\024\u011d\025\u0118\026\u0115\027" +
    "\u0128\073\u0124\075\u010f\076\u011b\077\u0129\107\u0125\111\u012a" +
    "\125\u0113\126\u011f\130\u0112\001\002\000\066\004\u0119\005" +
    "\u0120\006\u0127\010\u0116\013\u012b\014\u0123\015\u0126\016\u0117" +
    "\017\u0122\020\u0111\021\u0114\022\u011e\023\u011a\024\u011d\025" +
    "\u0118\026\u0115\027\u0128\073\u0124\075\u010f\076\u011b\077\u0129" +
    "\107\u0125\111\u012a\125\u0113\126\u011f\130\u0112\001\002\000" +
    "\066\004\u0119\005\u0120\006\u0127\010\u0116\013\u012b\014\u0123" +
    "\015\u0126\016\u0117\017\u0122\020\u0111\021\u0114\022\u011e\023" +
    "\u011a\024\u011d\025\u0118\026\u0115\027\u0128\073\u0124\075\u010f" +
    "\076\u011b\077\u0129\107\u0125\111\u012a\125\u0113\126\u011f\130" +
    "\u0112\001\002\000\024\011\uff5f\012\uff5f\072\uff5f\110\uff5f" +
    "\112\uff5f\113\uff5f\117\uff5f\120\uff5f\122\uff5f\001\002\000" +
    "\066\004\u0119\005\u0120\006\u0127\010\u0116\013\u012b\014\u0123" +
    "\015\u0126\016\u0117\017\u0122\020\u0111\021\u0114\022\u011e\023" +
    "\u011a\024\u011d\025\u0118\026\u0115\027\u0128\073\u0124\075\u010f" +
    "\076\u011b\077\u0129\107\u0125\111\u012a\125\u0113\126\u011f\130" +
    "\u0112\001\002\000\066\004\u0119\005\u0120\006\u0127\010\u0116" +
    "\013\u012b\014\u0123\015\u0126\016\u0117\017\u0122\020\u0111\021" +
    "\u0114\022\u011e\023\u011a\024\u011d\025\u0118\026\u0115\027\u0128" +
    "\073\u0124\075\u010f\076\u011b\077\u0129\107\u0125\111\u012a\125" +
    "\u0113\126\u011f\130\u0112\001\002\000\066\004\u0119\005\u0120" +
    "\006\u0127\010\u0116\013\u012b\014\u0123\015\u0126\016\u0117\017" +
    "\u0122\020\u0111\021\u0114\022\u011e\023\u011a\024\u011d\025\u0118" +
    "\026\u0115\027\u0128\073\u0124\075\u010f\076\u011b\077\u0129\107" +
    "\u0125\111\u012a\125\u0113\126\u011f\130\u0112\001\002\000\024" +
    "\011\uff94\012\uff94\072\uff94\110\uff94\112\uff94\113\uff94\117" +
    "\uff94\120\uff94\122\uff94\001\002\000\024\011\uff95\012\uff95" +
    "\072\uff95\110\uff95\112\uff95\113\uff95\117\uff95\120\uff95\122" +
    "\uff95\001\002\000\024\011\uff90\012\uff90\072\uff90\110\uff90" +
    "\112\uff90\113\uff90\117\uff90\120\uff90\122\uff90\001\002\000" +
    "\024\011\uff91\012\uff91\072\uff91\110\uff91\112\uff91\113\uff91" +
    "\117\uff91\120\uff91\122\uff91\001\002\000\024\011\uff93\012" +
    "\uff93\072\uff93\110\uff93\112\uff93\113\uff93\117\uff93\120\uff93" +
    "\122\uff93\001\002\000\024\011\uff92\012\uff92\072\uff92\110" +
    "\uff92\112\uff92\113\uff92\117\uff92\120\uff92\122\uff92\001\002" +
    "\000\004\100\u0177\001\002\000\004\100\u0175\001\002\000" +
    "\004\100\u0173\001\002\000\006\076\uff55\100\uff55\001\002" +
    "\000\010\100\u0161\102\u0160\103\u0162\001\002\000\004\100" +
    "\u015e\001\002\000\004\100\u015c\001\002\000\066\004\u0119" +
    "\005\u0120\006\u0127\010\u0116\013\u012b\014\u0123\015\u0126\016" +
    "\u0117\017\u0122\020\u0111\021\u0114\022\u011e\023\u011a\024\u011d" +
    "\025\u0118\026\u0115\027\u0128\073\u0124\075\u010f\076\u011b\077" +
    "\u0129\107\u0125\111\u012a\125\u0113\126\u011f\130\u0112\001\002" +
    "\000\024\011\uff6f\012\uff6f\072\uff6f\110\uff6f\112\uff6f\113" +
    "\uff6f\117\uff6f\120\uff6f\122\uff6f\001\002\000\066\004\u0119" +
    "\005\u0120\006\u0127\010\u0116\013\u012b\014\u0123\015\u0126\016" +
    "\u0117\017\u0122\020\u0111\021\u0114\022\u011e\023\u011a\024\u011d" +
    "\025\u0118\026\u0115\027\u0128\073\u0124\075\u010f\076\u011b\077" +
    "\u0129\107\u0125\111\u012a\125\u0113\126\u011f\130\u0112\001\002" +
    "\000\024\011\uff79\012\uff79\072\uff79\110\uff79\112\uff79\113" +
    "\uff79\117\uff79\120\uff79\122\uff79\001\002\000\006\100\u016a" +
    "\111\u0169\001\002\000\066\004\u0119\005\u0120\006\u0127\010" +
    "\u0116\013\u012b\014\u0123\015\u0126\016\u0117\017\u0122\020\u0111" +
    "\021\u0114\022\u011e\023\u011a\024\u011d\025\u0118\026\u0115\027" +
    "\u0128\073\u0124\075\u010f\076\u011b\077\u0129\107\u0125\111\u012a" +
    "\125\u0113\126\u011f\130\u0112\001\002\000\006\100\u0164\111" +
    "\u0163\001\002\000\010\112\uff99\113\uff99\125\u013c\001\002" +
    "\000\066\004\u0119\005\u0120\006\u0127\010\u0116\013\u012b\014" +
    "\u0123\015\u0126\016\u0117\017\u0122\020\u0111\021\u0114\022\u011e" +
    "\023\u011a\024\u011d\025\u0118\026\u0115\027\u0128\073\u0124\075" +
    "\u010f\076\u011b\077\u0129\107\u0125\111\u012a\125\u0113\126\u011f" +
    "\130\u0112\001\002\000\024\011\uff73\012\uff73\072\uff73\110" +
    "\uff73\112\uff73\113\uff73\117\uff73\120\uff73\122\uff73\001\002" +
    "\000\006\112\u0167\113\u013d\001\002\000\006\076\uff58\100" +
    "\uff58\001\002\000\024\011\uff6d\012\uff6d\072\uff6d\110\uff6d" +
    "\112\uff6d\113\uff6d\117\uff6d\120\uff6d\122\uff6d\001\002\000" +
    "\012\112\uff5d\113\uff5d\124\u016c\125\u016d\001\002\000\066" +
    "\004\u0119\005\u0120\006\u0127\010\u0116\013\u012b\014\u0123\015" +
    "\u0126\016\u0117\017\u0122\020\u0111\021\u0114\022\u011e\023\u011a" +
    "\024\u011d\025\u0118\026\u0115\027\u0128\073\u0124\075\u010f\076" +
    "\u011b\077\u0129\107\u0125\111\u012a\125\u0113\126\u011f\130\u0112" +
    "\001\002\000\024\011\uff74\012\uff74\072\uff74\110\uff74\112" +
    "\uff74\113\uff74\117\uff74\120\uff74\122\uff74\001\002\000\006" +
    "\112\uff5b\113\uff5b\001\002\000\006\112\uff5c\113\uff5c\001" +
    "\002\000\006\112\u0170\113\u016f\001\002\000\006\124\u0171" +
    "\125\u0172\001\002\000\006\076\uff57\100\uff57\001\002\000" +
    "\006\112\uff59\113\uff59\001\002\000\006\112\uff5a\113\uff5a" +
    "\001\002\000\066\004\u0119\005\u0120\006\u0127\010\u0116\013" +
    "\u012b\014\u0123\015\u0126\016\u0117\017\u0122\020\u0111\021\u0114" +
    "\022\u011e\023\u011a\024\u011d\025\u0118\026\u0115\027\u0128\073" +
    "\u0124\075\u010f\076\u011b\077\u0129\107\u0125\111\u012a\125\u0113" +
    "\126\u011f\130\u0112\001\002\000\024\011\uff77\012\uff77\072" +
    "\uff77\110\uff77\112\uff77\113\uff77\117\uff77\120\uff77\122\uff77" +
    "\001\002\000\066\004\u0119\005\u0120\006\u0127\010\u0116\013" +
    "\u012b\014\u0123\015\u0126\016\u0117\017\u0122\020\u0111\021\u0114" +
    "\022\u011e\023\u011a\024\u011d\025\u0118\026\u0115\027\u0128\073" +
    "\u0124\075\u010f\076\u011b\077\u0129\107\u0125\111\u012a\125\u0113" +
    "\126\u011f\130\u0112\001\002\000\024\011\uff6b\012\uff6b\072" +
    "\uff6b\110\uff6b\112\uff6b\113\uff6b\117\uff6b\120\uff6b\122\uff6b" +
    "\001\002\000\066\004\u0119\005\u0120\006\u0127\010\u0116\013" +
    "\u012b\014\u0123\015\u0126\016\u0117\017\u0122\020\u0111\021\u0114" +
    "\022\u011e\023\u011a\024\u011d\025\u0118\026\u0115\027\u0128\073" +
    "\u0124\075\u010f\076\u011b\077\u0129\107\u0125\111\u012a\125\u0113" +
    "\126\u011f\130\u0112\001\002\000\024\011\uff70\012\uff70\072" +
    "\uff70\110\uff70\112\uff70\113\uff70\117\uff70\120\uff70\122\uff70" +
    "\001\002\000\024\011\uff60\012\uff60\072\uff60\110\uff60\112" +
    "\uff60\113\uff60\117\uff60\120\uff60\122\uff60\001\002\000\004" +
    "\104\u017b\001\002\000\066\004\u0119\005\u0120\006\u0127\010" +
    "\u0116\013\u012b\014\u0123\015\u0126\016\u0117\017\u0122\020\u0111" +
    "\021\u0114\022\u011e\023\u011a\024\u011d\025\u0118\026\u0115\027" +
    "\u0128\073\u0124\075\u010f\076\u011b\077\u0129\107\u0125\111\u012a" +
    "\125\u0113\126\u011f\130\u0112\001\002\000\024\011\uff7d\012" +
    "\uff7d\072\uff7d\110\uff7d\112\uff7d\113\uff7d\117\uff7d\120\uff7d" +
    "\122\uff7d\001\002\000\024\011\uff7b\012\uff7b\072\uff7b\110" +
    "\uff7b\112\uff7b\113\uff7b\117\uff7b\120\uff7b\122\uff7b\001\002" +
    "\000\004\104\u017f\001\002\000\066\004\u0119\005\u0120\006" +
    "\u0127\010\u0116\013\u012b\014\u0123\015\u0126\016\u0117\017\u0122" +
    "\020\u0111\021\u0114\022\u011e\023\u011a\024\u011d\025\u0118\026" +
    "\u0115\027\u0128\073\u0124\075\u010f\076\u011b\077\u0129\107\u0125" +
    "\111\u012a\125\u0113\126\u011f\130\u0112\001\002\000\024\011" +
    "\uff7e\012\uff7e\072\uff7e\110\uff7e\112\uff7e\113\uff7e\117\uff7e" +
    "\120\uff7e\122\uff7e\001\002\000\004\104\u0182\001\002\000" +
    "\066\004\u0119\005\u0120\006\u0127\010\u0116\013\u012b\014\u0123" +
    "\015\u0126\016\u0117\017\u0122\020\u0111\021\u0114\022\u011e\023" +
    "\u011a\024\u011d\025\u0118\026\u0115\027\u0128\073\u0124\075\u010f" +
    "\076\u011b\077\u0129\107\u0125\111\u012a\125\u0113\126\u011f\130" +
    "\u0112\001\002\000\024\011\uff6a\012\uff6a\072\uff6a\110\uff6a" +
    "\112\uff6a\113\uff6a\117\uff6a\120\uff6a\122\uff6a\001\002\000" +
    "\024\011\uff86\012\uff86\072\uff86\110\uff86\112\uff86\113\uff86" +
    "\117\uff86\120\uff86\122\uff86\001\002\000\004\104\u0135\001" +
    "\002\000\024\011\uff63\012\uff63\072\uff63\110\uff63\112\uff63" +
    "\113\uff63\117\uff63\120\uff63\122\uff63\001\002\000\024\011" +
    "\uff88\012\uff88\072\uff88\110\uff88\112\uff88\113\uff88\117\uff88" +
    "\120\uff88\122\uff88\001\002\000\024\011\uff87\012\uff87\072" +
    "\uff87\110\uff87\112\uff87\113\uff87\117\uff87\120\uff87\122\uff87" +
    "\001\002\000\024\011\uff64\012\uff64\072\uff64\110\uff64\112" +
    "\uff64\113\uff64\117\uff64\120\uff64\122\uff64\001\002\000\024" +
    "\011\uff62\012\uff62\072\uff62\110\uff62\112\uff62\113\uff62\117" +
    "\uff62\120\uff62\122\uff62\001\002\000\004\104\u018c\001\002" +
    "\000\066\004\u0119\005\u0120\006\u0127\010\u0116\013\u012b\014" +
    "\u0123\015\u0126\016\u0117\017\u0122\020\u0111\021\u0114\022\u011e" +
    "\023\u011a\024\u011d\025\u0118\026\u0115\027\u0128\073\u0124\075" +
    "\u010f\076\u011b\077\u0129\107\u0125\111\u012a\125\u0113\126\u011f" +
    "\130\u0112\001\002\000\024\011\uff7c\012\uff7c\072\uff7c\110" +
    "\uff7c\112\uff7c\113\uff7c\117\uff7c\120\uff7c\122\uff7c\001\002" +
    "\000\024\011\uff80\012\uff80\072\uff80\110\uff80\112\uff80\113" +
    "\uff80\117\uff80\120\uff80\122\uff80\001\002\000\024\011\uff61" +
    "\012\uff61\072\uff61\110\uff61\112\uff61\113\uff61\117\uff61\120" +
    "\uff61\122\uff61\001\002\000\004\104\u0142\001\002\000\004" +
    "\125\u019a\001\002\000\066\004\u0119\005\u0120\006\u0127\010" +
    "\u0116\013\u012b\014\u0123\015\u0126\016\u0117\017\u0122\020\u0111" +
    "\021\u0114\022\u011e\023\u011a\024\u011d\025\u0118\026\u0115\027" +
    "\u0128\073\u0124\075\u010f\076\u011b\077\u0129\107\u0125\111\u012a" +
    "\125\u0113\126\u011f\130\u0112\001\002\000\004\125\u0194\001" +
    "\002\000\024\011\uff83\012\uff83\072\uff83\110\uff83\112\uff83" +
    "\113\uff83\117\uff83\120\uff83\122\uff83\001\002\000\022\011" +
    "\u014a\012\u014c\072\u014d\110\u014e\112\uff54\113\uff54\117\u0149" +
    "\120\u0148\001\002\000\006\112\u0198\113\u0197\001\002\000" +
    "\066\004\u0119\005\u0120\006\u0127\010\u0116\013\u012b\014\u0123" +
    "\015\u0126\016\u0117\017\u0122\020\u0111\021\u0114\022\u011e\023" +
    "\u011a\024\u011d\025\u0118\026\u0115\027\u0128\073\u0124\075\u010f" +
    "\076\u011b\077\u0129\107\u0125\111\u012a\125\u0113\126\u011f\130" +
    "\u0112\001\002\000\024\011\uff82\012\uff82\072\uff82\110\uff82" +
    "\112\uff82\113\uff82\117\uff82\120\uff82\122\uff82\001\002\000" +
    "\022\011\u014a\012\u014c\072\u014d\110\u014e\112\uff53\113\uff53" +
    "\117\u0149\120\u0148\001\002\000\024\011\uff84\012\uff84\072" +
    "\uff84\110\uff84\112\uff84\113\uff84\117\uff84\120\uff84\122\uff84" +
    "\001\002\000\004\104\u019c\001\002\000\066\004\u0119\005" +
    "\u0120\006\u0127\010\u0116\013\u012b\014\u0123\015\u0126\016\u0117" +
    "\017\u0122\020\u0111\021\u0114\022\u011e\023\u011a\024\u011d\025" +
    "\u0118\026\u0115\027\u0128\073\u0124\075\u010f\076\u011b\077\u0129" +
    "\107\u0125\111\u012a\125\u0113\126\u011f\130\u0112\001\002\000" +
    "\024\011\uff69\012\uff69\072\uff69\110\uff69\112\uff69\113\uff69" +
    "\117\uff69\120\uff69\122\uff69\001\002\000\024\011\uff89\012" +
    "\uff89\072\uff89\110\uff89\112\uff89\113\uff89\117\uff89\120\uff89" +
    "\122\uff89\001\002\000\004\076\u01b6\001\002\000\004\076" +
    "\u01b4\001\002\000\004\076\u01b2\001\002\000\024\011\uff8a" +
    "\012\uff8a\072\uff8a\110\uff8a\112\uff8a\113\uff8a\117\uff8a\120" +
    "\uff8a\122\uff8a\001\002\000\004\076\u01b0\001\002\000\010" +
    "\076\u01a9\102\u01a8\103\u01aa\001\002\000\004\076\u01a6\001" +
    "\002\000\066\004\u0119\005\u0120\006\u0127\010\u0116\013\u012b" +
    "\014\u0123\015\u0126\016\u0117\017\u0122\020\u0111\021\u0114\022" +
    "\u011e\023\u011a\024\u011d\025\u0118\026\u0115\027\u0128\073\u0124" +
    "\075\u010f\076\u011b\077\u0129\107\u0125\111\u012a\125\u0113\126" +
    "\u011f\130\u0112\001\002\000\024\011\uff78\012\uff78\072\uff78" +
    "\110\uff78\112\uff78\113\uff78\117\uff78\120\uff78\122\uff78\001" +
    "\002\000\006\076\u01ae\111\u0169\001\002\000\066\004\u0119" +
    "\005\u0120\006\u0127\010\u0116\013\u012b\014\u0123\015\u0126\016" +
    "\u0117\017\u0122\020\u0111\021\u0114\022\u011e\023\u011a\024\u011d" +
    "\025\u0118\026\u0115\027\u0128\073\u0124\075\u010f\076\u011b\077" +
    "\u0129\107\u0125\111\u012a\125\u0113\126\u011f\130\u0112\001\002" +
    "\000\006\076\u01ab\111\u0163\001\002\000\066\004\u0119\005" +
    "\u0120\006\u0127\010\u0116\013\u012b\014\u0123\015\u0126\016\u0117" +
    "\017\u0122\020\u0111\021\u0114\022\u011e\023\u011a\024\u011d\025" +
    "\u0118\026\u0115\027\u0128\073\u0124\075\u010f\076\u011b\077\u0129" +
    "\107\u0125\111\u012a\125\u0113\126\u011f\130\u0112\001\002\000" +
    "\024\011\uff75\012\uff75\072\uff75\110\uff75\112\uff75\113\uff75" +
    "\117\uff75\120\uff75\122\uff75\001\002\000\024\011\uff6e\012" +
    "\uff6e\072\uff6e\110\uff6e\112\uff6e\113\uff6e\117\uff6e\120\uff6e" +
    "\122\uff6e\001\002\000\066\004\u0119\005\u0120\006\u0127\010" +
    "\u0116\013\u012b\014\u0123\015\u0126\016\u0117\017\u0122\020\u0111" +
    "\021\u0114\022\u011e\023\u011a\024\u011d\025\u0118\026\u0115\027" +
    "\u0128\073\u0124\075\u010f\076\u011b\077\u0129\107\u0125\111\u012a" +
    "\125\u0113\126\u011f\130\u0112\001\002\000\024\011\uff76\012" +
    "\uff76\072\uff76\110\uff76\112\uff76\113\uff76\117\uff76\120\uff76" +
    "\122\uff76\001\002\000\066\004\u0119\005\u0120\006\u0127\010" +
    "\u0116\013\u012b\014\u0123\015\u0126\016\u0117\017\u0122\020\u0111" +
    "\021\u0114\022\u011e\023\u011a\024\u011d\025\u0118\026\u0115\027" +
    "\u0128\073\u0124\075\u010f\076\u011b\077\u0129\107\u0125\111\u012a" +
    "\125\u0113\126\u011f\130\u0112\001\002\000\024\011\uff72\012" +
    "\uff72\072\uff72\110\uff72\112\uff72\113\uff72\117\uff72\120\uff72" +
    "\122\uff72\001\002\000\066\004\u0119\005\u0120\006\u0127\010" +
    "\u0116\013\u012b\014\u0123\015\u0126\016\u0117\017\u0122\020\u0111" +
    "\021\u0114\022\u011e\023\u011a\024\u011d\025\u0118\026\u0115\027" +
    "\u0128\073\u0124\075\u010f\076\u011b\077\u0129\107\u0125\111\u012a" +
    "\125\u0113\126\u011f\130\u0112\001\002\000\024\011\uff71\012" +
    "\uff71\072\uff71\110\uff71\112\uff71\113\uff71\117\uff71\120\uff71" +
    "\122\uff71\001\002\000\066\004\u0119\005\u0120\006\u0127\010" +
    "\u0116\013\u012b\014\u0123\015\u0126\016\u0117\017\u0122\020\u0111" +
    "\021\u0114\022\u011e\023\u011a\024\u011d\025\u0118\026\u0115\027" +
    "\u0128\073\u0124\075\u010f\076\u011b\077\u0129\107\u0125\111\u012a" +
    "\125\u0113\126\u011f\130\u0112\001\002\000\024\011\uff6c\012" +
    "\uff6c\072\uff6c\110\uff6c\112\uff6c\113\uff6c\117\uff6c\120\uff6c" +
    "\122\uff6c\001\002\000\066\004\u0119\005\u0120\006\u0127\010" +
    "\u0116\013\u012b\014\u0123\015\u0126\016\u0117\017\u0122\020\u0111" +
    "\021\u0114\022\u011e\023\u011a\024\u011d\025\u0118\026\u0115\027" +
    "\u0128\073\u0124\075\u010f\076\u011b\077\u0129\107\u0125\111\u012a" +
    "\125\u0113\126\u011f\130\u0112\001\002\000\024\011\uff7a\012" +
    "\uff7a\072\uff7a\110\uff7a\112\uff7a\113\uff7a\117\uff7a\120\uff7a" +
    "\122\uff7a\001\002\000\010\003\u01b9\125\231\126\u01bc\001" +
    "\002\000\006\003\uff9e\114\uff9e\001\002\000\006\112\u01c1" +
    "\113\u01c0\001\002\000\006\112\u01be\113\u01bd\001\002\000" +
    "\006\112\uff9b\113\uff9b\001\002\000\004\126\u01bf\001\002" +
    "\000\006\003\uffa0\114\uffa0\001\002\000\006\112\uff9a\113" +
    "\uff9a\001\002\000\006\125\235\126\u01bc\001\002\000\006" +
    "\003\uffa1\114\uffa1\001\002\000\006\112\u01c3\113\u01bd\001" +
    "\002\000\006\003\uffa2\114\uffa2\001\002\000\004\122\uffe0" +
    "\001\002\000\010\003\u01c6\111\u01c8\121\uffd0\001\002\000" +
    "\004\122\uffe1\001\002\000\004\121\u01cf\001\002\000\012" +
    "\003\u01c9\112\uffb1\113\uffb1\125\u01cb\001\002\000\004\121" +
    "\uffce\001\002\000\006\112\u01cd\113\u01cc\001\002\000\006" +
    "\112\uffb0\113\uffb0\001\002\000\004\125\u01ce\001\002\000" +
    "\004\121\uffcf\001\002\000\006\112\uffaf\113\uffaf\001\002" +
    "\000\070\003\u01d1\004\u0119\005\u0120\006\u0127\010\u0116\013" +
    "\u012b\014\u0123\015\u0126\016\u0117\017\u0122\020\u0111\021\u0114" +
    "\022\u011e\023\u011a\024\u011d\025\u0118\026\u0115\027\u0128\073" +
    "\u0124\075\u010f\076\u011b\077\u0129\107\u0125\111\u012a\125\u0113" +
    "\126\u011f\130\u0112\001\002\000\020\011\u014a\012\u014c\072" +
    "\u014d\110\u014e\117\u0149\120\u0148\122\uffe3\001\002\000\004" +
    "\122\uffe2\001\002\000\042\002\ufffd\003\ufffd\031\ufffd\034" +
    "\ufffd\035\ufffd\036\ufffd\042\ufffd\043\ufffd\044\ufffd\047\ufffd" +
    "\050\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\122\ufffd\001" +
    "\002\000\004\122\u01d4\001\002\000\042\002\ufff1\003\ufff1" +
    "\031\ufff1\034\ufff1\035\ufff1\036\ufff1\042\ufff1\043\ufff1\044" +
    "\ufff1\047\ufff1\050\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1" +
    "\122\ufff1\001\002\000\004\122\u01d9\001\002\000\004\122" +
    "\u01d8\001\002\000\042\002\uffef\003\uffef\031\uffef\034\uffef" +
    "\035\uffef\036\uffef\042\uffef\043\uffef\044\uffef\047\uffef\050" +
    "\uffef\053\uffef\054\uffef\055\uffef\056\uffef\122\uffef\001\002" +
    "\000\042\002\uffed\003\uffed\031\uffed\034\uffed\035\uffed\036" +
    "\uffed\042\uffed\043\uffed\044\uffed\047\uffed\050\uffed\053\uffed" +
    "\054\uffed\055\uffed\056\uffed\122\uffed\001\002\000\042\002" +
    "\uffee\003\uffee\031\uffee\034\uffee\035\uffee\036\uffee\042\uffee" +
    "\043\uffee\044\uffee\047\uffee\050\uffee\053\uffee\054\uffee\055" +
    "\uffee\056\uffee\122\uffee\001\002\000\004\122\u01dd\001\002" +
    "\000\004\122\u01dc\001\002\000\042\002\uffea\003\uffea\031" +
    "\uffea\034\uffea\035\uffea\036\uffea\042\uffea\043\uffea\044\uffea" +
    "\047\uffea\050\uffea\053\uffea\054\uffea\055\uffea\056\uffea\122" +
    "\uffea\001\002\000\042\002\uffe9\003\uffe9\031\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\042\uffe9\043\uffe9\044\uffe9\047\uffe9\050" +
    "\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\122\uffe9\001\002" +
    "\000\042\002\uffeb\003\uffeb\031\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\042\uffeb\043\uffeb\044\uffeb\047\uffeb\050\uffeb\053\uffeb" +
    "\054\uffeb\055\uffeb\056\uffeb\122\uffeb\001\002\000\042\002" +
    "\uffe5\003\uffe5\031\uffe5\034\uffe5\035\uffe5\036\uffe5\042\uffe5" +
    "\043\uffe5\044\uffe5\047\uffe5\050\uffe5\053\uffe5\054\uffe5\055" +
    "\uffe5\056\uffe5\122\uffe5\001\002\000\042\002\ufffc\003\ufffc" +
    "\031\ufffc\034\ufffc\035\ufffc\036\ufffc\042\ufffc\043\ufffc\044" +
    "\ufffc\047\ufffc\050\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc" +
    "\122\ufffc\001\002\000\042\002\uffe6\003\uffe6\031\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\042\uffe6\043\uffe6\044\uffe6\047\uffe6" +
    "\050\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\122\uffe6\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01df\000\014\002\016\003\026\004\024\005\013\022" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\u010b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\002\027\003\026\004\024\005\013" +
    "\022\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\060\001\001\000\002\001\001\000\004" +
    "\024\227\001\001\000\002\001\001\000\006\011\067\012" +
    "\062\001\001\000\002\001\001\000\004\021\220\001\001" +
    "\000\006\011\216\012\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\077\001" +
    "\001\000\002\001\001\000\004\012\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\124\001\001\000\002\001\001\000\006\013\132" +
    "\014\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\141\001\001" +
    "\000\002\001\001\000\004\020\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\146\001\001\000\002" +
    "\001\001\000\004\013\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\201\012\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\236\001\001\000" +
    "\002\001\001\000\006\011\240\012\062\001\001\000\004" +
    "\006\241\001\001\000\002\001\001\000\004\007\243\001" +
    "\001\000\002\001\001\000\010\036\251\037\257\041\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\036\251\037\257\041\364\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\036\265\037\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\273\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\036\276\037" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\302\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\036\305\037\257\001\001\000\002" +
    "\001\001\000\004\020\307\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\036\312\037\257\001\001\000\002" +
    "\001\001\000\004\020\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\036\317\037\257\001\001\000\002" +
    "\001\001\000\006\037\322\040\323\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\326" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\036\334\037\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\344\037\257\001\001\000\002\001\001\000\006\036\346" +
    "\037\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\036\352\037\257\001\001\000\002" +
    "\001\001\000\006\036\354\037\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\036\251\037\257\041\357" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\362\037\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\372\037\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\036\377\037\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\u010f\030\u011b\001\001\000\002\001\001\000" +
    "\006\033\u01a4\034\u019e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\u018e\001\001\000\004\030\u018d\001\001" +
    "\000\002\001\001\000\004\030\u0189\001\001\000\002\001" +
    "\001\000\004\030\u0188\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\u0185\001\001\000\002\001\001\000" +
    "\004\031\u0183\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\u0178\001\001\000\006\033\u0156\034\u0159\001\001\000" +
    "\006\027\u012e\030\u011b\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\u012d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\u0133\001\001\000\004\026\u013a\001\001\000\002\001" +
    "\001\000\004\030\u0135\001\001\000\002\001\001\000\004" +
    "\030\u0137\001\001\000\002\001\001\000\004\031\u0139\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\u0140\001\001\000\002\001\001\000\004\030\u0142" +
    "\001\001\000\002\001\001\000\004\030\u0144\001\001\000" +
    "\002\001\001\000\004\031\u0146\001\001\000\002\001\001" +
    "\000\004\030\u0153\001\001\000\004\030\u0152\001\001\000" +
    "\004\030\u0151\001\001\000\002\001\001\000\004\030\u0150" +
    "\001\001\000\004\030\u014f\001\001\000\004\030\u014e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\u015c\001\001\000\002\001\001\000\004" +
    "\030\u015e\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\u0167\001\001\000\002\001\001\000\004\026\u0165" +
    "\001\001\000\004\030\u0164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\u016d\001\001\000\004\030\u016a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\u0173\001\001\000\002\001\001" +
    "\000\004\030\u0175\001\001\000\002\001\001\000\004\030" +
    "\u0177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\u017b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\u017f\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\u0182\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\u018c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\027\u0194\030\u011b\035\u0195\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\u0198\030\u011b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\u019c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\u01a6\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\u01ac\001\001\000\002\001\001\000\004\030" +
    "\u01ab\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\u01ae\001\001\000\002\001\001\000\004\030\u01b0\001" +
    "\001\000\002\001\001\000\004\030\u01b2\001\001\000\002" +
    "\001\001\000\004\030\u01b4\001\001\000\002\001\001\000" +
    "\004\030\u01b6\001\001\000\002\001\001\000\006\024\u01b9" +
    "\025\u01ba\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\u01c1\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\u01c6\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\u01c9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\u01cf\030\u011b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {



    public static <T> List<T> list(T ... ts) {
        List<T> result = List$.MODULE$.empty();
        for(int i = ts.length; i > 0; i--) {
            result = new $colon$colon(ts[i - 1], result);
        }
        return result;
    }
    
    public static <T> List<T> nil() {
      List<T> result = List$.MODULE$.empty();
      return result;
    }
    
    public static <T> List<T> cons(T t, List<T> ts) {
      return new $colon$colon(t, ts);
    }
    
    public static <T> List<T> snoc(List<T> ts, T t) {
      return cons(t, ts.reverse()).reverse();
    }
    

  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // proc_cc ::= proc_cc PIPE error 
            {
              ConversationCalculus RESULT =null;
		 CW.error("<PROCESS>"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("proc_cc",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // proc_cc ::= proc_cc PIPE cc_simple_proc 
            {
              ConversationCalculus RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ConversationCalculus v1 = (ConversationCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ConversationCalculus v3 = (ConversationCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.ccParallel(v1,v3); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("proc_cc",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // proc_cc ::= cc_simple_proc 
            {
              ConversationCalculus RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ConversationCalculus v1 = (ConversationCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = v1; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("proc_cc",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // cc_branches ::= cc_branches SEMI cc_input 
            {
              List<ConversationCalculus> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<ConversationCalculus> v1 = (List<ConversationCalculus>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ConversationCalculus v3 = (ConversationCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = cons(v3, v1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cc_branches",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // cc_branches ::= cc_input 
            {
              List<ConversationCalculus> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ConversationCalculus v1 = (ConversationCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = list(v1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cc_branches",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // cc_input ::= LOWER_ID UPC QUESTION LPAR inp_ids RPAR DOT cc_simple_proc 
            {
              ConversationCalculus RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		List<String> v5 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v8left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v8right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ConversationCalculus v8 = (ConversationCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.ccAction(CW.ccInput(CW.ccUp(), v1, v5.reverse()), v8); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cc_input",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // cc_input ::= LOWER_ID QUESTION LPAR inp_ids RPAR DOT cc_simple_proc 
            {
              ConversationCalculus RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		List<String> v4 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v7left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v7right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ConversationCalculus v7 = (ConversationCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.ccAction(CW.ccInput(CW.ccHere(), v1, v4.reverse()), v7); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cc_input",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // cc_simple_proc ::= LPAR proc_cc RPAR 
            {
              ConversationCalculus RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ConversationCalculus v2 = (ConversationCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = v2; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cc_simple_proc",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // cc_simple_proc ::= IF LPAR LOWER_ID NEQ LOWER_ID RPAR THEN cc_simple_proc ELSE cc_simple_proc 
            {
              ConversationCalculus RESULT =null;
		int v8left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v8right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ConversationCalculus v8 = (ConversationCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v10left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v10right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ConversationCalculus v10 = (ConversationCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.ccIfThenElse(v8,v10); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cc_simple_proc",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-9)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // cc_simple_proc ::= IF LPAR LOWER_ID EQ LOWER_ID RPAR THEN cc_simple_proc ELSE cc_simple_proc 
            {
              ConversationCalculus RESULT =null;
		int v8left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v8right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ConversationCalculus v8 = (ConversationCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v10left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v10right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ConversationCalculus v10 = (ConversationCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.ccIfThenElse(v8,v10); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cc_simple_proc",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-9)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // cc_simple_proc ::= THIS LPAR LOWER_ID RPAR DOT cc_simple_proc 
            {
              ConversationCalculus RESULT =null;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v6left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v6right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ConversationCalculus v6 = (ConversationCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.ccThis(v3,v6); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cc_simple_proc",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // cc_simple_proc ::= SWITCH LBR cc_branches RBR 
            {
              ConversationCalculus RESULT =null;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<ConversationCalculus> v3 = (List<ConversationCalculus>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = CW.ccSum(v3.reverse()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cc_simple_proc",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // cc_simple_proc ::= JOIN LOWER_ID DOT LOWER_ID DEFARROW cc_simple_proc 
            {
              ConversationCalculus RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String v4 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v6left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v6right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ConversationCalculus v6 = (ConversationCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.ccJoin(v2,v4,v6); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cc_simple_proc",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // cc_simple_proc ::= NEW LOWER_ID DOT LOWER_ID DEFARROW cc_simple_proc 
            {
              ConversationCalculus RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String v4 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v6left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v6right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ConversationCalculus v6 = (ConversationCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.ccNew(v2, v4, v6); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cc_simple_proc",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // cc_simple_proc ::= DEFC LOWER_ID IMPLIES cc_simple_proc 
            {
              ConversationCalculus RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ConversationCalculus v4 = (ConversationCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.ccDefinition(v2, v4); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cc_simple_proc",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // cc_simple_proc ::= LOWER_ID UPC BANG LPAR out_ids RPAR DOT cc_simple_proc 
            {
              ConversationCalculus RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		List<String> v5 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v8left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v8right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ConversationCalculus v8 = (ConversationCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.ccAction(CW.ccOutput(CW.ccUp(), v1, v5.reverse()), v8); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cc_simple_proc",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // cc_simple_proc ::= LOWER_ID BANG LPAR out_ids RPAR DOT cc_simple_proc 
            {
              ConversationCalculus RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		List<String> v4 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v7left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v7right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ConversationCalculus v7 = (ConversationCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.ccAction(CW.ccOutput(CW.ccHere(), v1, v4.reverse()), v7); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cc_simple_proc",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // cc_simple_proc ::= cc_input 
            {
              ConversationCalculus RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ConversationCalculus v1 = (ConversationCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = v1; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cc_simple_proc",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // cc_simple_proc ::= CTX LOWER_ID LBR proc_cc RBR 
            {
              ConversationCalculus RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ConversationCalculus v4 = (ConversationCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = CW.ccContext(v2,v4); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cc_simple_proc",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // cc_simple_proc ::= CAPS_ID id_args 
            {
              ConversationCalculus RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		List<String> v2 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.ccVariable(v1,v2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cc_simple_proc",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // cc_simple_proc ::= END 
            {
              ConversationCalculus RESULT =null;
		 RESULT = CW.ccInaction(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("cc_simple_proc",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // args ::= args COMMA form 
            {
              List<ModalLogic> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<ModalLogic> v1 = (List<ModalLogic>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v3 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = snoc(v1, v3); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("args",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // args ::= form 
            {
              List<ModalLogic> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v1 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = list(v1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("args",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // tau ::= TAU 
            {
              Object RESULT =null;
		 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tau",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // tau ::= 
            {
              Object RESULT =null;
		 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("tau",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // label ::= LOWER_ID BANG LPAR label_ids_uscore RPAR 
            {
              Label RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<String> v4 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = CW.mlOutLab(v1, v4.reverse()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("label",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // label ::= LOWER_ID QUESTION LPAR label_ids RPAR 
            {
              Label RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<String> v4 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = CW.mlInpLab(v1, v4.reverse()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("label",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // label_ids_uscore ::= label_ids_uscore COMMA USCORE 
            {
              List<String> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<String> v1 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = cons("_", v1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("label_ids_uscore",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // label_ids_uscore ::= label_ids_uscore COMMA LOWER_ID 
            {
              List<String> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<String> v1 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = cons(v3, v1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("label_ids_uscore",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // label_ids_uscore ::= USCORE 
            {
              List<String> RESULT =null;
		 RESULT = list("_"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("label_ids_uscore",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // label_ids_uscore ::= LOWER_ID 
            {
              List<String> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = list(v1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("label_ids_uscore",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // label_ids_uscore ::= 
            {
              List<String> RESULT =null;
		 RESULT = list(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("label_ids_uscore",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // fixpoint_args ::= LPAR label_ids RPAR 
            {
              List<String> RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<String> v2 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = v2.reverse(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fixpoint_args",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // simple_form ::= LPAR form RPAR 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ModalLogic v2 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = v2; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // simple_form ::= SHOW_S simple_form 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v2 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlShowSucceeds(v2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // simple_form ::= SHOW_F simple_form 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v2 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlShowFails(v2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // simple_form ::= INSIDE simple_form 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v2 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlInside(v2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // simple_form ::= ALWAYS simple_form 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v2 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlAlways(v2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // simple_form ::= EVENTUALLY simple_form 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v2 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlEventually(v2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // simple_form ::= MINFIX CAPS_ID DOT simple_form 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v4 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 List<String> n = nil();
       RESULT = CW.mlMinimumFixpoint(v2, n, v4, n); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // simple_form ::= LPAR MINFIX CAPS_ID fixpoint_args DOT simple_form RPAR fixpoint_args 
            {
              ModalLogic RESULT =null;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		List<String> v4 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int v6left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v6right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ModalLogic v6 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v8left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v8right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		List<String> v8 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlMinimumFixpoint(v3,v4,v6,v8); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // simple_form ::= MAXFIX CAPS_ID DOT simple_form 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v4 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 List<String> n = nil();
       RESULT = CW.mlMaximumFixpoint(v2, n, v4, n); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // simple_form ::= LPAR MAXFIX CAPS_ID fixpoint_args DOT simple_form RPAR fixpoint_args 
            {
              ModalLogic RESULT =null;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		List<String> v4 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int v6left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v6right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ModalLogic v6 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v8left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v8right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		List<String> v8 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlMaximumFixpoint(v3,v4,v6,v8); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // simple_form ::= FORALL LOWER_ID DOT simple_form 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v4 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlForAll(v2,v4); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // simple_form ::= EXISTS LOWER_ID DOT simple_form 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v4 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlExists(v2,v4); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // simple_form ::= LPARR STAR RPARR simple_form 
            {
              ModalLogic RESULT =null;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v4 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlAll(v4); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // simple_form ::= LT STAR GT simple_form 
            {
              ModalLogic RESULT =null;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v4 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlMay(v4); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // simple_form ::= LPARR LOWER_ID RPARR simple_form 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v4 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlAllN(v2,v4); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // simple_form ::= LT LOWER_ID GT simple_form 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v4 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlMayN(v2,v4); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // simple_form ::= LPARR QUESTION RPARR simple_form 
            {
              ModalLogic RESULT =null;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v4 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlAllInput(v4); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // simple_form ::= LPARR BANG RPARR simple_form 
            {
              ModalLogic RESULT =null;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v4 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlAllOutput(v4); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // simple_form ::= LT QUESTION GT simple_form 
            {
              ModalLogic RESULT =null;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v4 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlMayInput(v4); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // simple_form ::= LT BANG GT simple_form 
            {
              ModalLogic RESULT =null;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v4 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlMayOutput(v4); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // simple_form ::= LPARR LOWER_ID QUESTION RPARR simple_form 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v5 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlAllInputN(v2,v5); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // simple_form ::= LPARR LOWER_ID BANG RPARR simple_form 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v5 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlAllOutputN(v2,v5); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // simple_form ::= LT LOWER_ID QUESTION GT simple_form 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v5 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlMayInputN(v2,v5); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // simple_form ::= LT LOWER_ID BANG GT simple_form 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v5 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlMayOutputN(v2,v5); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // simple_form ::= LPARR label RPARR simple_form 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Label v2 = (Label)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v4 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlAllLabelled(v2,v4); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // simple_form ::= LT label GT simple_form 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Label v2 = (Label)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v4 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlMayLabelled(v2,v4); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // simple_form ::= LPARR tau RPARR simple_form 
            {
              ModalLogic RESULT =null;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v4 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlAllTau(v4); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // simple_form ::= LT tau GT simple_form 
            {
              ModalLogic RESULT =null;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v4 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlMayTau(v4); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // simple_form ::= FREE LOWER_ID 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlFree(v2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // simple_form ::= FRESH LOWER_ID DOT simple_form 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v4 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlFresh(v2,v4); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // simple_form ::= HIDDEN LOWER_ID DOT simple_form 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v4 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlHidden(v2,v4); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // simple_form ::= REVEALALL LOWER_ID DOT simple_form 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v4 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlRevealAll(v2,v4); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // simple_form ::= REVEAL LOWER_ID DOT simple_form 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v4 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlReveal(v2,v4); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // simple_form ::= NOT simple_form 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v2 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlNot(v2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // simple_form ::= LOWER_ID 
            {
              ModalLogic RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 List<ModalLogic> n = nil();
       RESULT = CW.mlAbbreviate(v1, n); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // simple_form ::= LOWER_ID LPAR args RPAR 
            {
              ModalLogic RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<ModalLogic> v3 = (List<ModalLogic>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = CW.mlAbbreviate(v1, v3); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // simple_form ::= LOWER_ID NEQ LOWER_ID 
            {
              ModalLogic RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlNotEqual(v1,v3); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // simple_form ::= LOWER_ID DEQ LOWER_ID 
            {
              ModalLogic RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlEqual(v1,v3); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // simple_form ::= CAPS_ID 
            {
              ModalLogic RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 List<String> n = nil();
       RESULT = CW.mlPropositionVariable(v1, n); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // simple_form ::= CAPS_ID fixpoint_args 
            {
              ModalLogic RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		List<String> v2 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlPropositionVariable(v1, v2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // simple_form ::= GT INT 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlCompare(v2, CW.mlGtNum()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // simple_form ::= GT ZERO 
            {
              ModalLogic RESULT =null;
		 RESULT = CW.mlCompare(0, CW.mlGtNum()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // simple_form ::= LT INT 
            {
              ModalLogic RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer v2 = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlCompare(v2, CW.mlLtNum()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // simple_form ::= LT ZERO 
            {
              ModalLogic RESULT =null;
		 RESULT = CW.mlCompare(0, CW.mlLtNum()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // simple_form ::= INT 
            {
              ModalLogic RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer v1 = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlCompare(v1, CW.mlEqNum()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // simple_form ::= ZERO 
            {
              ModalLogic RESULT =null;
		 RESULT = CW.mlVoid(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // simple_form ::= VOID 
            {
              ModalLogic RESULT =null;
		 RESULT = CW.mlVoid(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // simple_form ::= FALSE 
            {
              ModalLogic RESULT =null;
		 RESULT = CW.mlFalse(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // simple_form ::= TRUE 
            {
              ModalLogic RESULT =null;
		 RESULT = CW.mlTrue(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_form",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // form ::= form OR simple_form 
            {
              ModalLogic RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ModalLogic v1 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v3 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlOr(v1, v3); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("form",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // form ::= form AND simple_form 
            {
              ModalLogic RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ModalLogic v1 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v3 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlAnd(v1, v3); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("form",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // form ::= form EQUIV simple_form 
            {
              ModalLogic RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ModalLogic v1 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v3 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlEquivalent(v1, v3); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("form",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // form ::= form IMPLIES simple_form 
            {
              ModalLogic RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ModalLogic v1 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v3 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlImplies(v1, v3); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("form",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // form ::= form DBLPIPE simple_form 
            {
              ModalLogic RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ModalLogic v1 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v3 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlDecompose(v1, v3); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("form",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // form ::= form PIPE simple_form 
            {
              ModalLogic RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ModalLogic v1 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v3 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.mlCompose(v1, v3); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("form",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // form ::= simple_form 
            {
              ModalLogic RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v1 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = v1; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("form",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // label_ids ::= label_ids COMMA LOWER_ID 
            {
              List<String> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<String> v1 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = cons(v3, v1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("label_ids",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // label_ids ::= LOWER_ID 
            {
              List<String> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = list(v1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("label_ids",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // label_ids ::= 
            {
              List<String> RESULT =null;
		 RESULT = list(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("label_ids",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // props ::= props COMMA CAPS_ID 
            {
              List<String> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<String> v1 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(CW.names().contains(v3)) {
         System.out.println("Repeated propositional parameter name " + v3);
         CW.error();
       }
       CW.names().put(v3, 0);
       RESULT = cons(v3, v1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("props",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // props ::= CAPS_ID 
            {
              List<String> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 CW.names().clear();
       CW.names().put(v1, 0);
       RESULT = list(v1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("props",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // param_ids ::= param_ids COMMA LOWER_ID 
            {
              List<String> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<String> v1 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(CW.names().contains(v3)) {
         System.out.println("Repeated parameter name " + v3);
         CW.error();
       }
       CW.names().put(v3, 0);
       RESULT = cons(v3, v1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("param_ids",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // param_ids ::= LOWER_ID 
            {
              List<String> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 CW.names().clear();
       CW.names().put(v1, 0);
       RESULT = list(v1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("param_ids",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // dec_name ::= LOWER_ID LPAR error 
            {
              Tuple3<String,List<String>,List<String>> RESULT =null;
		 CW.error("<ID> [,<ID>]*\n<PROP_ID> [,<PROP_ID>]*" +
    "\n<ID> [,<ID>]*, <PROP_ID> [,<PROP_ID>]*"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("dec_name",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // dec_name ::= LOWER_ID 
            {
              Tuple3<String,List<String>,List<String>> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Tuple3(v1, list(), list()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("dec_name",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // dec_name ::= LOWER_ID LPAR props RPAR 
            {
              Tuple3<String,List<String>,List<String>> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<String> v3 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Tuple3(v1, list(),v3); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("dec_name",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // dec_name ::= LOWER_ID LPAR param_ids RPAR 
            {
              Tuple3<String,List<String>,List<String>> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<String> v3 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Tuple3(v1, v3.reverse(), list()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("dec_name",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // dec_name ::= LOWER_ID LPAR param_ids COMMA props RPAR 
            {
              Tuple3<String,List<String>,List<String>> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		List<String> v3 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<String> v5 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Tuple3(v1, v3.reverse(), v5); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("dec_name",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // def_prop ::= DEFPROP error 
            {
              SLMCStatement RESULT =null;
		 CW.error("<FORMULA LOWER_IDENTIFIER>"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("def_prop",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // def_prop ::= DEFPROP dec_name error 
            {
              SLMCStatement RESULT =null;
		 CW.error("=\n("); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("def_prop",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // def_prop ::= DEFPROP dec_name EQ error 
            {
              SLMCStatement RESULT =null;
		 CW.error("<FORMULA>"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("def_prop",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // def_prop ::= DEFPROP dec_name EQ form 
            {
              SLMCStatement RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Tuple3<String,List<String>,List<String>> v2 = (Tuple3<String,List<String>,List<String>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v4 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.ssDefineProposition(v2._1(), v2._2(), v2._3(), v4); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("def_prop",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // res_ids ::= res_ids COMMA LOWER_ID 
            {
              List<String> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<String> v1 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(CW.names().contains(v3)) {
         System.out.println("Repeated restricted name " + v3);
         CW.error();
       }
       CW.names().put(v3, 0);
       CW.usage().put(v3, 0);
       RESULT = cons(v3, v1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("res_ids",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // res_ids ::= LOWER_ID 
            {
              List<String> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 CW.names().clear();
       CW.names().put(v1, 0);
       CW.usage().put(v1, 0);
       RESULT = list(v1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("res_ids",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // out_ids ::= out_ids COMMA LOWER_ID 
            {
              List<String> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<String> v1 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(CW.usage().contains(v3)) {
         CW.usage().put(v3, 1);
       }
       RESULT = cons(v3, v1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("out_ids",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // out_ids ::= LOWER_ID 
            {
              List<String> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(CW.usage().contains(v1)) {
         CW.usage().put(v1, 1);
       }
       RESULT = list(v1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("out_ids",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // out_ids ::= 
            {
              List<String> RESULT =null;
		 RESULT = list(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("out_ids",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // inp_ids ::= inp_ids COMMA LOWER_ID 
            {
              List<String> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<String> v1 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(CW.names().contains(v3)) {
         System.out.println("Repeated name in input " + v3);
         CW.error();
       }
       CW.names().put(v3, 0);
       CW.usage().put(v3, 0);
       RESULT = cons(v3, v1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("inp_ids",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // inp_ids ::= LOWER_ID 
            {
              List<String> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 CW.names().clear();
       CW.names().put(v1, 0);
       CW.usage().put(v1, 0);
       RESULT = list(v1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("inp_ids",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // inp_ids ::= 
            {
              List<String> RESULT =null;
		 RESULT = list(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("inp_ids",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // check_ids ::= check_ids COMMA LOWER_ID 
            {
              List<String> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<String> v1 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = cons(v3, v1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("check_ids",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // check_ids ::= LOWER_ID 
            {
              List<String> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = list(v1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("check_ids",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // check_ids ::= 
            {
              List<String> RESULT =null;
		 RESULT = list(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("check_ids",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // id_args ::= LPAR out_ids RPAR 
            {
              List<String> RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<String> v2 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = v2.reverse(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("id_args",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // id_args ::= 
            {
              List<String> RESULT =null;
		 RESULT = list(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("id_args",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sum ::= sum SEMI act_sum 
            {
              PiCalculus RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		PiCalculus v1 = (PiCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		PiCalculus v3 = (PiCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.pcSum(v1, v3); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sum",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sum ::= act_sum 
            {
              PiCalculus RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		PiCalculus v1 = (PiCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = v1; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sum",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // act_sum ::= LPARR LOWER_ID NEQ LOWER_ID RPARR DOT simple_proc 
            {
              PiCalculus RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String v4 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v7left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v7right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		PiCalculus v7 = (PiCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(CW.usage().contains(v2)) {
         CW.usage().put(v2, 1);
       }
       if(CW.usage().contains(v4)) {
         CW.usage().put(v4, 1);
       }
       RESULT = CW.pcTest(v2, v4, v7, CW.pcDiffers()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("act_sum",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // act_sum ::= LPARR LOWER_ID EQ LOWER_ID RPARR DOT simple_proc 
            {
              PiCalculus RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String v4 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v7left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v7right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		PiCalculus v7 = (PiCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(CW.usage().contains(v2)) {
         CW.usage().put(v2, 1);
       }
       if(CW.usage().contains(v4)) {
         CW.usage().put(v4, 1);
       }
       RESULT = CW.pcTest(v2, v4, v7, CW.pcEquals()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("act_sum",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // act_sum ::= TAU 
            {
              PiCalculus RESULT =null;
		 RESULT = CW.pcAction(CW.pcTau(), CW.pcVoid()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("act_sum",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // act_sum ::= TAU DOT simple_proc 
            {
              PiCalculus RESULT =null;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		PiCalculus v3 = (PiCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.pcAction(CW.pcTau(), v3); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("act_sum",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // act_sum ::= LOWER_ID BANG LPAR out_ids RPAR 
            {
              PiCalculus RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<String> v4 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 if(CW.usage().contains(v1)) {
         CW.usage().put(v1, 1);
       }
       RESULT = CW.pcAction(CW.pcOutput(v1, v4.reverse()), CW.pcVoid()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("act_sum",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // act_sum ::= LOWER_ID BANG LPAR out_ids RPAR DOT simple_proc 
            {
              PiCalculus RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		List<String> v4 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v7left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v7right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		PiCalculus v7 = (PiCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(CW.usage().contains(v1)) {
         CW.usage().put(v1, 1);
       }
       RESULT = CW.pcAction(CW.pcOutput(v1, v4.reverse()), v7); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("act_sum",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // act_sum ::= LOWER_ID QUESTION LPAR inp_ids RPAR 
            {
              PiCalculus RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<String> v4 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 if(CW.usage().contains(v1)) {
         CW.usage().put(v1, 1);
       }
       for(String id: CW.makeIterable(v4)) {
         CW.usage().remove(id);
       }
       RESULT = CW.pcAction(CW.pcInput(v1, v4.reverse()), CW.pcVoid()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("act_sum",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // act_sum ::= LOWER_ID QUESTION LPAR inp_ids RPAR DOT simple_proc 
            {
              PiCalculus RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		List<String> v4 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v7left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v7right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		PiCalculus v7 = (PiCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(CW.usage().contains(v1)) {
         CW.usage().put(v1, 1);
       }
       for(String id: CW.makeIterable(v4)) {
         CW.usage().remove(id);
       }
       RESULT = CW.pcAction(CW.pcInput(v1, v4.reverse()), v7); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("act_sum",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // simple_proc ::= LPAR proc RPAR 
            {
              PiCalculus RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		PiCalculus v2 = (PiCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = v2; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_proc",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // simple_proc ::= SELECT LBR sum RBR 
            {
              PiCalculus RESULT =null;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		PiCalculus v3 = (PiCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = v3; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_proc",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // simple_proc ::= LPARR LOWER_ID NEQ LOWER_ID RPARR DOT simple_proc 
            {
              PiCalculus RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String v4 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v7left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v7right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		PiCalculus v7 = (PiCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(CW.usage().contains(v2)) {
         CW.usage().put(v2, 1);
       }
       if(CW.usage().contains(v4)) {
         CW.usage().put(v4, 1);
       }
       RESULT = CW.pcTest(v2, v4, v7, CW.pcDiffers()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_proc",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // simple_proc ::= LPARR LOWER_ID EQ LOWER_ID RPARR DOT simple_proc 
            {
              PiCalculus RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String v4 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v7left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v7right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		PiCalculus v7 = (PiCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(CW.usage().contains(v2)) {
         CW.usage().put(v2, 1);
       }
       if(CW.usage().contains(v4)) {
         CW.usage().put(v4, 1);
       }
       RESULT = CW.pcTest(v2, v4, v7, CW.pcEquals()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_proc",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // simple_proc ::= TAU 
            {
              PiCalculus RESULT =null;
		 RESULT = CW.pcAction(CW.pcTau(), CW.pcVoid()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_proc",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // simple_proc ::= TAU DOT simple_proc 
            {
              PiCalculus RESULT =null;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		PiCalculus v3 = (PiCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.pcAction(CW.pcTau(), v3); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_proc",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // simple_proc ::= LOWER_ID BANG LPAR out_ids RPAR 
            {
              PiCalculus RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<String> v4 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 if(CW.usage().contains(v1)) {
         CW.usage().put(v1, 1);
       }
       RESULT = CW.pcAction(CW.pcOutput(v1, v4.reverse()), CW.pcVoid()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_proc",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // simple_proc ::= LOWER_ID BANG LPAR out_ids RPAR DOT simple_proc 
            {
              PiCalculus RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		List<String> v4 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v7left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v7right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		PiCalculus v7 = (PiCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(CW.usage().contains(v1)) {
         CW.usage().put(v1, 1);
       }
       RESULT = CW.pcAction(CW.pcOutput(v1, v4.reverse()), v7); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_proc",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // simple_proc ::= LOWER_ID QUESTION LPAR inp_ids RPAR 
            {
              PiCalculus RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<String> v4 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 if(CW.usage().contains(v1)) {
         CW.usage().put(v1, 1);
       }
       for(String id: CW.makeIterable(v4)) {
         CW.usage().remove(id);
       }
       RESULT = CW.pcAction(CW.pcInput(v1, v4.reverse()), CW.pcVoid()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_proc",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // simple_proc ::= LOWER_ID QUESTION LPAR inp_ids RPAR DOT simple_proc 
            {
              PiCalculus RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		List<String> v4 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v7left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v7right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		PiCalculus v7 = (PiCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(CW.usage().contains(v1)) {
         CW.usage().put(v1, 1);
       }
       for(String id: CW.makeIterable(v4)) {
         CW.usage().remove(id);
       }
       RESULT = CW.pcAction(CW.pcInput(v1, v4.reverse()), v7); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_proc",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // simple_proc ::= NEW res_ids IN simple_proc 
            {
              PiCalculus RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<String> v2 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		PiCalculus v4 = (PiCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 for(String id: CW.makeIterable(v2)) {
         if(CW.usage().get(id).get() == 0) {
           System.out.println("Warning: Unused restricted name " + id);
         } else {
           CW.usage().remove(id);
         }
       }
       RESULT = CW.pcNew(v2.reverse(), v4); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_proc",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // simple_proc ::= CAPS_ID id_args 
            {
              PiCalculus RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		List<String> v2 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.pcVariable(v1,v2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_proc",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // simple_proc ::= ZERO 
            {
              PiCalculus RESULT =null;
		 RESULT = CW.pcVoid(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple_proc",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // proc ::= proc PIPE error 
            {
              PiCalculus RESULT =null;
		 CW.error("<PROCESS>"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("proc",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // proc ::= proc PIPE simple_proc 
            {
              PiCalculus RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		PiCalculus v1 = (PiCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		PiCalculus v3 = (PiCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.pcParallel(v1,v3); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("proc",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // proc ::= simple_proc 
            {
              PiCalculus RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		PiCalculus v1 = (PiCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = v1; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("proc",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // check_args ::= LPAR error 
            {
              List<String> RESULT =null;
		 CW.error("<ID> [,<ID>]*\n)"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("check_args",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // check_args ::= LPAR check_ids RPAR 
            {
              List<String> RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<String> v2 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = v2.reverse(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("check_args",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // check_args ::= 
            {
              List<String> RESULT =null;
		 RESULT = list(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("check_args",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // params ::= LPAR error 
            {
              List<String> RESULT =null;
		 CW.error("<ID> [,<ID>]*\n)"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // params ::= LPAR param_ids RPAR 
            {
              List<String> RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<String> v2 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = v2.reverse(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // params ::= LPAR RPAR 
            {
              List<String> RESULT =null;
		 RESULT = list(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // params ::= 
            {
              List<String> RESULT =null;
		 RESULT = list(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ands ::= ands AND CAPS_ID error 
            {
              Tuple3<List<String>,List<List<String>>,List<PiCalculus>> RESULT =null;
		 CW.error("=\n("); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ands",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ands ::= ands AND CAPS_ID params EQ error 
            {
              Tuple3<List<String>,List<List<String>>,List<PiCalculus>> RESULT =null;
		 CW.error("<PROCESS>"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ands",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ands ::= ands AND CAPS_ID params EQ proc 
            {
              Tuple3<List<String>,List<List<String>>,List<PiCalculus>> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Tuple3<List<String>,List<List<String>>,List<PiCalculus>> v1 = (Tuple3<List<String>,List<List<String>>,List<PiCalculus>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<String> v4 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v6left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v6right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		PiCalculus v6 = (PiCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Tuple3(cons(v3, v1._1()), cons(v4, v1._2()), cons(v6, v1._3())); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ands",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ands ::= 
            {
              Tuple3<List<String>,List<List<String>>,List<PiCalculus>> RESULT =null;
		 List<String> n1 = nil();
       List<List<String>> n2 = nil();
       List<PiCalculus> n3 = nil();
       RESULT = new Tuple3(n1, n2, n3); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ands",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // def_proc ::= DEFPROC error 
            {
              SLMCStatement RESULT =null;
		 CW.error("<PROCESS LOWER_IDENTIFIER>"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("def_proc",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // def_proc ::= DEFPROC CAPS_ID error 
            {
              SLMCStatement RESULT =null;
		 CW.error("=\n("); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("def_proc",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // def_proc ::= DEFPROC CAPS_ID params EQ error 
            {
              SLMCStatement RESULT =null;
		 CW.error("<PROCESS>"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("def_proc",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // def_proc ::= DEFPROC CAPS_ID params EQ proc error 
            {
              SLMCStatement RESULT =null;
		 CW.error("and\n;\n|"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("def_proc",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // def_proc ::= DEFPROC CAPS_ID params EQ proc ands 
            {
              SLMCStatement RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		List<String> v3 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		PiCalculus v5 = (PiCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int v6left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v6right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Tuple3<List<String>,List<List<String>>,List<PiCalculus>> v6 = (Tuple3<List<String>,List<List<String>>,List<PiCalculus>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.ssDefinePiProcesses(cons(v2, v6._1()), cons(v3, v6._2()), cons(v5, v6._3())); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("def_proc",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // def_proc ::= DEFPROC PI CAPS_ID params EQ proc ands 
            {
              SLMCStatement RESULT =null;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		List<String> v4 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v6left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v6right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		PiCalculus v6 = (PiCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int v7left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v7right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Tuple3<List<String>,List<List<String>>,List<PiCalculus>> v7 = (Tuple3<List<String>,List<List<String>>,List<PiCalculus>>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.ssDefinePiProcesses(cons(v3, v7._1()), cons(v4, v7._2()), cons(v6, v7._3())); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("def_proc",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // def_proc ::= DEFPROC CONV CAPS_ID params EQ proc_cc 
            {
              SLMCStatement RESULT =null;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<String> v4 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v6left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v6right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ConversationCalculus v6 = (ConversationCalculus)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.ssDefineCCProcess(v3,v4,v6); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("def_proc",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // check ::= CHECK error 
            {
              SLMCStatement RESULT =null;
		 CW.error("<PROCESS LOWER_IDENTIFIER>"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("check",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // check ::= CHECK CAPS_ID error 
            {
              SLMCStatement RESULT =null;
		 CW.error("|=\n("); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("check",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // check ::= CHECK CAPS_ID check_args SAT error 
            {
              SLMCStatement RESULT =null;
		 CW.error("<FORMULA>"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("check",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // check ::= CHECK CAPS_ID check_args SAT form 
            {
              SLMCStatement RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<String> v3 = (List<String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v5left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ModalLogic v5 = (ModalLogic)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = CW.ssCheck(v2,v3,v5); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("check",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= error SEMI 
            {
              SLMCStatement RESULT =null;
		 CW.error("defproc\ndefprop\ncheck\nparameter\nnew ListW" +
	"\nshow\nload\ncd\npd\ntrace\nclear\nhelp\nquit"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= QUIT SEMI 
            {
              SLMCStatement RESULT =null;
		 RESULT = CW.ssDone(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= HELP SEMI 
            {
              SLMCStatement RESULT =null;
		 RESULT = CW.ssHelp(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= PRINT PROPS SEMI 
            {
              SLMCStatement RESULT =null;
		 RESULT = CW.ssPrintPropositions(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= PRINT PROCS SEMI 
            {
              SLMCStatement RESULT =null;
		 RESULT = CW.ssPrintProcesses(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= SHOW LOWER_ID SEMI 
            {
              SLMCStatement RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = CW.ssShowProposition(v2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= SHOW CAPS_ID SEMI 
            {
              SLMCStatement RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = CW.ssShowProcess(v2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= CLEAR SEMI 
            {
              SLMCStatement RESULT =null;
		 RESULT = CW.ssClear(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= LOAD FILENAME SEMI 
            {
              SLMCStatement RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = CW.ssLoad(v2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= TRACE OFF SEMI 
            {
              SLMCStatement RESULT =null;
		 RESULT = CW.ssDefineTrace(false); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= TRACE ON SEMI 
            {
              SLMCStatement RESULT =null;
		 RESULT = CW.ssDefineTrace(true); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= TRACE SEMI 
            {
              SLMCStatement RESULT =null;
		 RESULT = CW.ssPrintTrace(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= PD SEMI 
            {
              SLMCStatement RESULT =null;
		 RESULT = CW.ssPrintDirectory(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= CD FILENAME SEMI 
            {
              SLMCStatement RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = CW.ssChangeDirectory(v2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= PARAM SEMI 
            {
              SLMCStatement RESULT =null;
		 RESULT = CW.ssListParameters(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= PARAM ST SEMI 
            {
              SLMCStatement RESULT =null;
		 RESULT = CW.ssPrintShowTime(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= PARAM ST OFF SEMI 
            {
              SLMCStatement RESULT =null;
		 RESULT = CW.ssDefineShowTime(false); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= PARAM ST ON SEMI 
            {
              SLMCStatement RESULT =null;
		 RESULT = CW.ssDefineShowTime(true); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= PARAM CC SEMI 
            {
              SLMCStatement RESULT =null;
		 RESULT = CW.ssPrintCheckCounter(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= PARAM CC OFF SEMI 
            {
              SLMCStatement RESULT =null;
		 RESULT = CW.ssDefineCheckCounter(false); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= PARAM CC ON SEMI 
            {
              SLMCStatement RESULT =null;
		 RESULT = CW.ssDefineCheckCounter(true); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= PARAM MT SEMI 
            {
              SLMCStatement RESULT =null;
		 RESULT = CW.ssPrintMaxThreads(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= PARAM MT INT SEMI 
            {
              SLMCStatement RESULT =null;
		int v3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Integer v3 = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = CW.ssDefineMaxThreads(v3); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= check SEMI 
            {
              SLMCStatement RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		SLMCStatement v1 = (SLMCStatement)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = v1; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= def_prop SEMI 
            {
              SLMCStatement RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		SLMCStatement v1 = (SLMCStatement)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = v1; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= def_proc SEMI 
            {
              SLMCStatement RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		SLMCStatement v1 = (SLMCStatement)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = v1; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt ::= SEMI 
            {
              SLMCStatement RESULT =null;
		 RESULT = CW.ssPass(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // top ::= stmt top 
            {
              List<SLMCStatement> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		SLMCStatement v1 = (SLMCStatement)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		List<SLMCStatement> v2 = (List<SLMCStatement>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = snoc(v2, v1);  
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("top",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // top ::= 
            {
              List<SLMCStatement> RESULT =null;
		 RESULT = nil(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("top",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= top EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<SLMCStatement> start_val = (List<SLMCStatement>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

