type token =
  | ID of (string)
  | CAPS_ID of (string)
  | FILENAME of (string)
  | INT of (int)
  | USCORE
  | NEW
  | REC
  | IN
  | BANG
  | QUESTION
  | PIPE
  | DOT
  | ZERO
  | SELECT
  | LBR
  | RBR
  | LPAR
  | RPAR
  | COMMA
  | TRUE
  | FALSE
  | DBLPIPE
  | VOID
  | AND
  | OR
  | NOT
  | DEQ
  | NEQ
  | IMPLIES
  | EQUIV
  | REVEAL
  | LT
  | GT
  | LPARR
  | RPARR
  | TAU
  | STAR
  | FRESH
  | HIDDEN
  | REVEALALL
  | FREE
  | EXISTS
  | FORALL
  | MAXFIX
  | MINFIX
  | ALWAYS
  | EVENTUALLY
  | INSIDE
  | SHOW_F
  | SHOW_S
  | DEFPROC
  | EQ
  | DEFPROP
  | CONV
  | DEFARROW
  | PI
  | SL
  | CDL
  | CHECK
  | PROCS
  | PROPS
  | SAT
  | CD
  | PD
  | TRACE
  | ON
  | OFF
  | PRINT
  | SHOW
  | QUIT
  | SEMI
  | LOAD
  | HELP
  | CLEAR
  | PARAM
  | MT
  | CC
  | ST
  | DEFC
  | CTX
  | JOIN
  | UPC
  | SWITCH
  | IF
  | THEN
  | ELSE
  | THIS
  | END
  | CHOICE
  | EXCHANGE
  | EOF

open Parsing;;
# 3 "mcparser.mly"


open Piastnode
open Formastnode
open Ccastnode

let names = Hashtbl.create 11
let usage = Hashtbl.create 53

    
# 107 "mcparser.ml"
let yytransl_const = [|
  261 (* USCORE *);
  262 (* NEW *);
  263 (* REC *);
  264 (* IN *);
  265 (* BANG *);
  266 (* QUESTION *);
  267 (* PIPE *);
  268 (* DOT *);
  269 (* ZERO *);
  270 (* SELECT *);
  271 (* LBR *);
  272 (* RBR *);
  273 (* LPAR *);
  274 (* RPAR *);
  275 (* COMMA *);
  276 (* TRUE *);
  277 (* FALSE *);
  278 (* DBLPIPE *);
  279 (* VOID *);
  280 (* AND *);
  281 (* OR *);
  282 (* NOT *);
  283 (* DEQ *);
  284 (* NEQ *);
  285 (* IMPLIES *);
  286 (* EQUIV *);
  287 (* REVEAL *);
  288 (* LT *);
  289 (* GT *);
  290 (* LPARR *);
  291 (* RPARR *);
  292 (* TAU *);
  293 (* STAR *);
  294 (* FRESH *);
  295 (* HIDDEN *);
  296 (* REVEALALL *);
  297 (* FREE *);
  298 (* EXISTS *);
  299 (* FORALL *);
  300 (* MAXFIX *);
  301 (* MINFIX *);
  302 (* ALWAYS *);
  303 (* EVENTUALLY *);
  304 (* INSIDE *);
  305 (* SHOW_F *);
  306 (* SHOW_S *);
  307 (* DEFPROC *);
  308 (* EQ *);
  309 (* DEFPROP *);
  310 (* CONV *);
  311 (* DEFARROW *);
  312 (* PI *);
  313 (* SL *);
  314 (* CDL *);
  315 (* CHECK *);
  316 (* PROCS *);
  317 (* PROPS *);
  318 (* SAT *);
  319 (* CD *);
  320 (* PD *);
  321 (* TRACE *);
  322 (* ON *);
  323 (* OFF *);
  324 (* PRINT *);
  325 (* SHOW *);
  326 (* QUIT *);
  327 (* SEMI *);
  328 (* LOAD *);
  329 (* HELP *);
  330 (* CLEAR *);
  331 (* PARAM *);
  332 (* MT *);
  333 (* CC *);
  334 (* ST *);
  335 (* DEFC *);
  336 (* CTX *);
  337 (* JOIN *);
  338 (* UPC *);
  339 (* SWITCH *);
  340 (* IF *);
  341 (* THEN *);
  342 (* ELSE *);
  343 (* THIS *);
  344 (* END *);
  345 (* CHOICE *);
  346 (* EXCHANGE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* ID *);
  258 (* CAPS_ID *);
  259 (* FILENAME *);
  260 (* INT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\004\000\004\000\004\000\004\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\010\000\
\010\000\010\000\010\000\007\000\007\000\007\000\007\000\005\000\
\005\000\005\000\009\000\009\000\009\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\018\000\018\000\014\000\014\000\012\000\012\000\
\012\000\016\000\016\000\016\000\017\000\017\000\017\000\015\000\
\015\000\003\000\003\000\003\000\003\000\020\000\020\000\020\000\
\020\000\020\000\011\000\011\000\021\000\021\000\022\000\022\000\
\022\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\024\000\028\000\028\000\028\000\028\000\028\000\027\000\
\027\000\026\000\026\000\025\000\025\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\030\000\030\000\031\000\031\000\008\000\
\008\000\008\000\000\000"

let yylen = "\002\000\
\002\000\002\000\002\000\004\000\003\000\004\000\004\000\003\000\
\004\000\004\000\003\000\002\000\003\000\002\000\002\000\003\000\
\003\000\003\000\002\000\003\000\003\000\003\000\003\000\002\000\
\001\000\002\000\001\000\002\000\005\000\005\000\003\000\002\000\
\006\000\007\000\006\000\006\000\005\000\003\000\002\000\000\000\
\006\000\006\000\004\000\000\000\002\000\003\000\002\000\000\000\
\003\000\002\000\001\000\003\000\003\000\001\000\002\000\004\000\
\007\000\005\000\007\000\005\000\003\000\001\000\007\000\007\000\
\004\000\003\000\007\000\005\000\007\000\005\000\003\000\001\000\
\007\000\007\000\001\000\003\000\000\000\003\000\000\000\001\000\
\003\000\000\000\001\000\003\000\000\000\001\000\003\000\001\000\
\003\000\004\000\004\000\003\000\002\000\006\000\004\000\004\000\
\001\000\003\000\001\000\003\000\001\000\003\000\000\000\001\000\
\003\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\001\000\001\000\001\000\001\000\001\000\002\000\002\000\002\000\
\002\000\002\000\001\000\003\000\003\000\004\000\001\000\002\000\
\004\000\004\000\004\000\004\000\002\000\004\000\004\000\004\000\
\004\000\005\000\005\000\005\000\005\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\008\000\
\004\000\008\000\004\000\002\000\002\000\002\000\002\000\002\000\
\003\000\003\000\000\000\001\000\001\000\003\000\003\000\005\000\
\005\000\000\000\001\000\001\000\003\000\001\000\002\000\005\000\
\001\000\007\000\008\000\004\000\006\000\006\000\004\000\006\000\
\010\000\010\000\003\000\007\000\008\000\001\000\003\000\001\000\
\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\
\000\000\027\000\195\000\000\000\000\000\000\000\028\000\039\000\
\000\000\000\000\000\000\093\000\000\000\000\000\032\000\000\000\
\000\000\014\000\000\000\000\000\015\000\000\000\000\000\000\000\
\000\000\026\000\000\000\024\000\019\000\012\000\000\000\000\000\
\000\000\001\000\002\000\003\000\038\000\000\000\000\000\000\000\
\000\000\000\000\092\000\000\000\031\000\000\000\000\000\013\000\
\016\000\017\000\022\000\023\000\021\000\020\000\018\000\000\000\
\005\000\000\000\000\000\008\000\000\000\000\000\011\000\047\000\
\099\000\045\000\000\000\000\000\000\000\000\000\098\000\101\000\
\000\000\000\000\091\000\000\000\000\000\117\000\116\000\000\000\
\113\000\114\000\115\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\106\000\050\000\
\080\000\000\000\000\000\004\000\006\000\007\000\009\000\010\000\
\046\000\000\000\037\000\000\000\000\000\000\000\054\000\000\000\
\000\000\000\000\000\000\000\000\051\000\000\000\000\000\095\000\
\000\000\096\000\000\000\000\000\000\000\000\000\000\000\122\000\
\000\000\000\000\000\000\128\000\000\000\000\000\119\000\000\000\
\000\000\118\000\171\000\000\000\000\000\000\000\121\000\120\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\133\000\000\000\000\000\000\000\000\000\157\000\156\000\
\158\000\159\000\160\000\000\000\000\000\000\000\000\000\000\000\
\000\000\049\000\000\000\030\000\000\000\100\000\000\000\000\000\
\000\000\055\000\088\000\000\000\000\000\000\000\000\000\000\000\
\036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\174\000\000\000\192\000\
\177\000\000\000\000\000\102\000\000\000\000\000\124\000\125\000\
\104\000\000\000\000\000\000\000\161\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\107\000\108\000\111\000\
\112\000\109\000\110\000\081\000\000\000\000\000\086\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\075\000\066\000\
\000\000\000\000\061\000\053\000\052\000\000\000\000\000\000\000\
\000\000\175\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\094\000\126\000\000\000\162\000\
\000\000\000\000\000\000\129\000\000\000\000\000\000\000\000\000\
\146\000\142\000\143\000\148\000\134\000\136\000\000\000\000\000\
\147\000\144\000\145\000\149\000\135\000\137\000\132\000\131\000\
\130\000\150\000\151\000\153\000\155\000\000\000\083\000\000\000\
\078\000\000\000\056\000\089\000\000\000\000\000\000\000\000\000\
\065\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\187\000\000\000\000\000\000\000\000\000\190\000\
\000\000\000\000\000\000\194\000\193\000\000\000\105\000\000\000\
\000\000\164\000\165\000\000\000\138\000\000\000\139\000\140\000\
\141\000\000\000\000\000\000\000\087\000\000\000\000\000\000\000\
\000\000\071\000\076\000\000\000\000\000\043\000\000\000\000\000\
\000\000\000\000\000\000\000\000\180\000\000\000\000\000\000\000\
\183\000\000\000\000\000\000\000\000\000\000\000\000\000\169\000\
\000\000\168\000\000\000\000\000\084\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\176\000\000\000\191\000\000\000\000\000\000\000\000\000\
\000\000\166\000\167\000\059\000\057\000\000\000\000\000\000\000\
\000\000\064\000\063\000\042\000\000\000\000\000\000\000\000\000\
\000\000\181\000\182\000\000\000\000\000\184\000\152\000\154\000\
\000\000\000\000\000\000\000\000\178\000\188\000\000\000\000\000\
\000\000\000\000\069\000\067\000\074\000\073\000\179\000\189\000\
\000\000\000\000\000\000\000\000\186\000\185\000"

let yydgoto = "\002\000\
\019\000\020\000\021\000\022\000\063\000\118\000\055\000\223\000\
\140\000\211\000\083\000\122\000\141\000\202\000\204\000\080\001\
\016\001\022\001\023\001\030\000\090\000\234\000\119\000\152\000\
\230\000\165\000\166\000\116\001\224\000\225\000\105\001"

let yysindex = "\058\000\
\001\000\000\000\058\255\179\255\061\000\012\000\172\255\115\255\
\185\255\022\000\066\000\129\255\000\000\250\255\188\255\205\255\
\149\255\000\000\000\000\209\255\217\255\232\255\000\000\000\000\
\087\255\230\255\040\000\000\000\032\000\016\255\000\000\193\255\
\238\255\000\000\248\255\028\000\000\000\043\000\060\000\069\000\
\075\000\000\000\076\000\000\000\000\000\000\000\011\255\223\255\
\225\255\000\000\000\000\000\000\000\000\030\255\041\000\063\000\
\063\000\057\000\000\000\077\000\000\000\084\000\082\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\079\000\
\000\000\110\000\123\000\000\000\125\000\126\000\000\000\000\000\
\000\000\000\000\068\000\241\255\085\000\113\000\000\000\000\000\
\070\000\073\000\000\000\233\255\183\000\000\000\000\000\178\000\
\000\000\000\000\000\000\228\000\214\000\227\255\042\255\212\255\
\230\000\241\000\242\000\243\000\245\000\246\000\248\000\250\000\
\228\000\228\000\228\000\228\000\228\000\042\001\000\000\000\000\
\000\000\083\000\128\000\000\000\000\000\000\000\000\000\000\000\
\000\000\252\000\000\000\086\000\238\000\255\000\000\000\249\000\
\029\001\000\001\251\000\025\255\000\000\032\255\029\001\000\000\
\103\000\000\000\007\001\228\000\001\001\025\001\026\001\000\000\
\030\001\031\001\026\000\000\000\016\001\134\255\000\000\005\001\
\006\001\000\000\000\000\008\001\011\001\012\001\000\000\000\000\
\131\255\013\001\014\001\015\001\017\001\019\001\022\001\035\001\
\039\001\000\000\043\001\044\001\046\001\048\001\000\000\000\000\
\000\000\000\000\000\000\228\000\228\000\228\000\228\000\228\000\
\228\000\000\000\060\001\000\000\042\001\000\000\045\001\051\001\
\068\001\000\000\000\000\118\255\026\255\251\255\023\255\029\001\
\000\000\009\000\049\001\003\255\238\000\069\001\032\255\073\001\
\074\001\075\001\062\001\061\001\063\001\000\000\070\001\000\000\
\000\000\071\001\088\000\000\000\042\001\094\000\000\000\000\000\
\000\000\115\000\033\255\161\255\000\000\228\000\182\255\184\255\
\228\000\228\000\228\000\228\000\228\000\228\000\104\255\117\255\
\228\000\228\000\228\000\228\000\228\000\228\000\228\000\228\000\
\228\000\228\000\228\000\228\000\228\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\068\001\078\001\000\000\117\000\
\029\001\082\001\129\000\083\001\076\001\013\255\000\000\000\000\
\084\001\085\001\000\000\000\000\000\000\087\001\077\001\079\001\
\133\000\000\000\080\001\007\000\058\001\086\001\081\001\089\001\
\090\001\094\001\022\255\049\001\000\000\000\000\228\000\000\000\
\096\001\088\001\091\001\000\000\039\255\228\000\026\001\228\000\
\000\000\000\000\000\000\000\000\000\000\000\000\228\000\228\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\134\000\000\000\137\000\
\000\000\097\001\000\000\000\000\092\001\093\001\038\255\029\001\
\000\000\026\255\064\001\067\001\194\255\068\001\078\001\095\001\
\098\001\103\001\000\000\032\255\032\255\104\001\004\255\000\000\
\027\255\144\255\099\001\000\000\000\000\042\001\000\000\228\000\
\228\000\000\000\000\000\139\000\000\000\145\000\000\000\000\000\
\000\000\101\001\102\001\105\001\000\000\068\001\078\001\106\001\
\107\001\000\000\000\000\108\001\109\001\000\000\059\001\165\000\
\167\000\068\001\078\001\072\001\000\000\030\000\100\001\112\001\
\000\000\089\001\115\001\117\001\111\001\110\001\113\001\000\000\
\229\255\000\000\029\001\029\001\000\000\169\000\171\000\114\001\
\116\001\029\001\029\001\023\001\118\001\120\001\174\000\184\000\
\032\255\000\000\032\255\000\000\119\001\121\001\032\255\183\000\
\183\000\000\000\000\000\000\000\000\000\122\001\123\001\124\001\
\126\001\000\000\000\000\000\000\071\001\032\255\032\255\128\001\
\129\001\000\000\000\000\034\001\040\001\000\000\000\000\000\000\
\029\001\029\001\029\001\029\001\000\000\000\000\032\255\032\255\
\032\255\032\255\000\000\000\000\000\000\000\000\000\000\000\000\
\038\001\047\001\032\255\032\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\125\001\000\000\000\000\000\000\079\255\000\000\000\000\127\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\125\001\
\125\001\000\000\000\000\000\000\000\000\187\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\158\255\173\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\130\001\000\000\131\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\255\000\000\000\000\000\000\
\000\000\000\000\056\255\017\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\189\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\132\001\000\000\000\000\000\000\
\195\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\133\001\000\000\036\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\134\001\000\000\
\000\000\017\255\000\000\000\000\215\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\195\000\217\000\000\000\000\000\
\000\000\000\000\000\000\000\000\047\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\115\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\219\000\000\000\189\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\125\001\195\000\217\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\221\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\065\255\114\255\000\000\000\000\195\000\217\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\195\000\217\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\057\255\062\255\000\000\
\000\000\000\000\000\000\000\000\037\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\165\255\202\255\050\255\
\119\255\159\001\084\002\000\000\083\255\186\001\000\000\187\254\
\253\254\000\000\054\001\000\000\000\002\135\001\160\255\028\255\
\000\000\042\002\043\002\000\000\255\254\227\254\000\000"

let yytablesize = 717
let yytable = "\206\000\
\018\000\085\000\086\000\156\000\155\000\226\000\050\001\051\001\
\036\001\078\001\104\001\031\001\032\001\032\001\072\000\059\000\
\183\000\184\000\185\000\186\000\187\000\108\001\212\000\213\000\
\209\000\137\001\019\001\214\000\089\001\080\000\081\000\197\000\
\212\000\213\000\027\001\210\000\029\001\214\000\215\000\114\001\
\040\000\109\001\145\001\115\001\004\001\167\000\077\000\082\000\
\215\000\151\000\025\001\077\000\077\000\077\000\168\000\062\000\
\229\000\159\001\001\000\020\001\041\000\021\001\072\000\077\000\
\060\000\128\001\062\000\060\000\077\000\168\001\077\000\062\000\
\070\000\062\000\026\001\060\000\077\000\068\000\097\000\062\000\
\060\000\073\000\060\000\090\001\033\001\144\001\053\000\040\000\
\060\000\129\001\136\001\006\001\007\001\008\001\009\001\010\001\
\011\001\146\001\141\001\083\001\216\000\217\000\218\000\054\000\
\219\000\220\000\077\000\041\000\221\000\222\000\216\000\217\000\
\218\000\058\000\219\000\220\000\172\001\072\000\221\000\222\000\
\053\001\077\000\158\001\077\000\058\000\017\001\062\000\070\000\
\023\000\058\000\097\000\058\000\068\000\055\001\167\001\060\000\
\018\001\058\000\063\001\247\000\248\000\052\001\239\000\240\000\
\057\001\058\001\059\001\060\001\061\001\062\001\142\001\064\001\
\065\001\066\001\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\249\000\241\000\194\001\
\127\000\195\001\130\001\147\001\005\001\198\001\033\000\127\000\
\127\000\151\000\024\000\127\000\025\000\127\000\127\000\123\000\
\058\000\034\000\127\000\127\000\205\001\206\001\123\000\123\000\
\061\000\134\001\123\000\148\001\123\000\123\000\053\001\042\000\
\055\001\123\000\123\000\199\001\200\001\215\001\216\001\217\001\
\218\001\062\000\054\000\110\001\169\000\117\001\054\001\119\001\
\056\001\221\001\222\001\046\000\170\000\171\000\120\001\121\001\
\047\000\048\000\049\000\158\000\127\000\178\001\159\000\056\000\
\026\000\179\001\027\000\160\000\161\000\180\001\181\001\162\000\
\131\000\132\000\133\000\123\000\186\001\187\001\134\000\163\000\
\172\000\148\000\035\000\036\000\043\000\135\000\136\000\037\000\
\003\000\137\000\044\000\149\000\150\000\210\000\163\000\164\000\
\028\001\132\000\133\000\031\000\024\001\032\000\134\000\150\001\
\151\001\043\001\138\000\045\000\139\000\135\000\136\000\050\000\
\099\001\137\000\189\001\211\001\212\001\213\001\214\001\051\000\
\074\000\075\000\077\000\078\000\188\000\076\000\135\001\079\000\
\043\001\057\000\138\000\237\000\139\000\170\001\052\000\189\000\
\058\000\190\000\191\000\004\000\064\000\005\000\192\000\193\000\
\087\000\081\000\088\000\006\000\028\000\029\000\065\000\007\000\
\008\000\009\000\040\000\041\000\010\000\011\000\012\000\013\000\
\014\000\015\000\016\000\017\000\091\000\092\000\093\000\054\000\
\094\000\038\000\039\000\120\000\121\000\129\000\130\000\144\000\
\145\000\095\000\146\000\147\000\084\000\096\000\199\000\200\000\
\097\000\098\000\066\000\099\000\194\000\195\000\100\000\198\000\
\088\000\045\001\147\000\101\000\102\000\103\000\104\000\046\001\
\047\001\067\000\105\000\106\000\107\000\108\000\109\000\110\000\
\111\000\112\000\113\000\114\000\115\000\116\000\117\000\196\000\
\092\000\093\000\068\000\094\000\048\001\049\001\081\001\082\001\
\142\000\085\001\086\001\069\000\095\000\096\001\097\001\123\000\
\096\000\070\000\071\000\097\000\098\000\124\000\099\000\122\001\
\082\001\100\000\123\001\124\001\152\001\153\001\101\000\102\000\
\103\000\104\000\154\001\049\001\143\000\105\000\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\114\000\115\000\
\116\000\117\000\092\000\093\000\125\000\094\000\165\001\082\001\
\166\001\124\001\182\001\082\001\183\001\124\001\095\000\192\001\
\082\001\126\000\096\000\127\000\128\000\097\000\098\000\151\000\
\099\000\193\001\124\001\100\000\079\000\079\000\103\000\103\000\
\101\000\102\000\103\000\104\000\085\000\085\000\157\000\105\000\
\106\000\107\000\108\000\109\000\110\000\153\000\154\000\113\000\
\114\000\115\000\116\000\117\000\092\000\093\000\175\000\094\000\
\172\000\172\000\082\000\082\000\163\000\163\000\173\000\173\000\
\095\000\176\000\177\000\178\000\096\000\179\000\180\000\097\000\
\098\000\181\000\099\000\182\000\198\000\100\000\201\000\203\000\
\207\000\231\000\101\000\102\000\103\000\104\000\208\000\205\000\
\228\000\105\000\106\000\107\000\108\000\109\000\110\000\111\000\
\112\000\113\000\114\000\115\000\116\000\117\000\188\001\132\000\
\133\000\232\000\233\000\238\000\134\000\132\000\133\000\235\000\
\236\000\255\000\134\000\135\000\136\000\242\000\243\000\137\000\
\244\000\135\000\136\000\245\000\246\000\137\000\000\001\250\000\
\251\000\252\000\001\001\253\000\188\000\254\000\002\001\003\001\
\138\000\004\001\139\000\005\001\012\001\013\001\138\000\189\000\
\139\000\190\000\191\000\014\001\015\001\035\001\192\000\193\000\
\030\001\037\001\038\001\039\001\040\001\041\001\079\001\042\001\
\043\001\210\000\084\001\087\001\091\001\092\001\100\001\088\001\
\093\001\103\001\106\001\098\001\102\001\094\001\107\001\095\001\
\111\001\125\001\132\001\112\001\101\001\133\001\113\001\140\001\
\143\001\157\001\160\001\161\001\126\001\127\001\164\001\138\001\
\155\001\156\001\139\001\173\001\149\001\174\001\209\001\162\001\
\163\001\097\001\175\001\219\001\210\001\090\000\169\001\176\001\
\044\001\190\001\177\001\191\001\220\001\201\001\202\001\203\001\
\196\001\204\001\197\001\207\001\208\001\089\000\034\001\131\001\
\227\000\173\000\174\000\000\000\184\001\000\000\185\001\000\000\
\000\000\000\000\171\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\170\000\000\000\000\000\170\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\044\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\048\000\118\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\029\000\035\000\033\000"

let yycheck = "\137\000\
\000\000\056\000\057\000\100\000\096\000\143\000\235\000\236\000\
\215\000\013\001\040\001\009\001\010\001\010\001\004\001\000\001\
\113\000\114\000\115\000\116\000\117\000\000\001\001\001\002\001\
\000\001\095\001\001\001\006\001\016\001\000\001\001\001\123\000\
\001\001\002\001\208\000\011\001\210\000\006\001\017\001\001\001\
\024\001\043\001\016\001\005\001\012\001\004\001\011\001\018\001\
\017\001\017\001\028\001\016\001\000\001\018\001\013\001\000\001\
\148\000\127\001\001\000\034\001\024\001\036\001\016\001\011\001\
\000\001\028\001\011\001\052\001\016\001\139\001\018\001\016\001\
\016\001\018\001\052\001\011\001\024\001\016\001\000\001\024\001\
\016\001\071\001\018\001\071\001\082\001\082\001\000\001\071\001\
\024\001\052\001\094\001\188\000\189\000\190\000\191\000\192\000\
\193\000\071\001\100\001\017\001\079\001\080\001\081\001\017\001\
\083\001\084\001\071\001\071\001\087\001\088\001\079\001\080\001\
\081\001\000\001\083\001\084\001\146\001\071\001\087\001\088\001\
\017\001\086\001\126\001\071\001\011\001\008\001\071\001\071\001\
\071\001\016\001\052\001\018\001\071\001\017\001\138\001\071\001\
\019\001\024\001\035\001\009\001\010\001\238\000\009\001\010\001\
\241\000\242\000\243\000\244\000\245\000\246\000\101\001\035\001\
\249\000\250\000\251\000\252\000\253\000\254\000\255\000\000\001\
\001\001\002\001\003\001\004\001\005\001\035\001\033\001\169\001\
\011\001\171\001\088\001\028\001\012\001\175\001\003\001\018\001\
\019\001\017\001\000\001\022\001\002\001\024\001\025\001\011\001\
\071\001\071\001\029\001\030\001\190\001\191\001\018\001\019\001\
\000\001\000\001\022\001\052\001\024\001\025\001\017\001\071\001\
\017\001\029\001\030\001\176\001\177\001\207\001\208\001\209\001\
\210\001\017\001\017\001\047\001\001\001\054\001\033\001\056\001\
\033\001\219\001\220\001\071\001\009\001\010\001\063\001\064\001\
\076\001\077\001\078\001\001\001\071\001\001\001\004\001\002\001\
\054\001\005\001\056\001\009\001\010\001\155\001\156\001\013\001\
\000\001\001\001\002\001\071\001\162\001\163\001\006\001\036\001\
\037\001\017\001\066\001\067\001\003\001\013\001\014\001\071\001\
\000\001\017\001\071\001\027\001\028\001\011\001\036\001\037\001\
\000\001\001\001\002\001\000\001\018\001\002\001\006\001\112\001\
\113\001\011\001\034\001\071\001\036\001\013\001\014\001\071\001\
\018\001\017\001\164\001\201\001\202\001\203\001\204\001\071\001\
\066\001\067\001\066\001\067\001\011\001\071\001\093\001\071\001\
\011\001\002\001\034\001\018\001\036\001\016\001\071\001\022\001\
\017\001\024\001\025\001\051\001\071\001\053\001\029\001\030\001\
\000\001\001\001\002\001\059\001\000\001\001\001\071\001\063\001\
\064\001\065\001\001\001\002\001\068\001\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\000\001\001\001\002\001\017\001\
\004\001\060\001\061\001\000\001\001\001\018\001\019\001\018\001\
\019\001\013\001\018\001\019\001\052\001\017\001\009\001\010\001\
\020\001\021\001\071\001\023\001\018\001\019\001\026\001\001\001\
\002\001\018\001\019\001\031\001\032\001\033\001\034\001\018\001\
\019\001\071\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\000\001\
\001\001\002\001\071\001\004\001\018\001\019\001\018\001\019\001\
\052\001\009\001\010\001\071\001\013\001\009\001\010\001\062\001\
\017\001\071\001\071\001\020\001\021\001\071\001\023\001\018\001\
\019\001\026\001\018\001\019\001\018\001\019\001\031\001\032\001\
\033\001\034\001\018\001\019\001\052\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\001\001\002\001\071\001\004\001\018\001\019\001\
\018\001\019\001\018\001\019\001\018\001\019\001\013\001\018\001\
\019\001\071\001\017\001\071\001\071\001\020\001\021\001\017\001\
\023\001\018\001\019\001\026\001\018\001\019\001\018\001\019\001\
\031\001\032\001\033\001\034\001\018\001\019\001\001\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\001\001\002\001\001\001\004\001\
\018\001\019\001\018\001\019\001\018\001\019\001\018\001\019\001\
\013\001\001\001\001\001\001\001\017\001\001\001\001\001\020\001\
\021\001\002\001\023\001\002\001\001\001\026\001\017\001\001\001\
\001\001\001\001\031\001\032\001\033\001\034\001\012\001\015\001\
\002\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\000\001\001\001\
\002\001\001\001\001\001\012\001\006\001\001\001\002\001\002\001\
\002\001\012\001\006\001\013\001\014\001\033\001\033\001\017\001\
\033\001\013\001\014\001\033\001\033\001\017\001\012\001\035\001\
\035\001\035\001\012\001\035\001\011\001\035\001\012\001\012\001\
\034\001\012\001\036\001\012\001\001\001\017\001\034\001\022\001\
\036\001\024\001\025\001\017\001\001\001\001\001\029\001\030\001\
\024\001\001\001\001\001\001\001\015\001\017\001\001\001\017\001\
\011\001\011\001\001\001\001\001\001\001\001\001\029\001\012\001\
\002\001\001\001\001\001\012\001\012\001\017\001\001\001\017\001\
\001\001\001\001\035\001\012\001\015\001\035\001\012\001\001\001\
\001\001\001\001\001\001\001\001\017\001\017\001\052\001\017\001\
\012\001\012\001\017\001\001\001\018\001\001\001\085\001\012\001\
\012\001\010\001\012\001\086\001\085\001\071\001\055\001\018\001\
\226\000\012\001\018\001\012\001\086\001\012\001\012\001\012\001\
\018\001\012\001\018\001\012\001\012\001\058\000\213\000\090\001\
\145\000\104\000\104\000\255\255\035\001\255\255\035\001\255\255\
\255\255\255\255\055\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\033\001\255\255\255\255\035\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\052\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\062\001\055\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\071\001\071\001\071\001"

let yynames_const = "\
  USCORE\000\
  NEW\000\
  REC\000\
  IN\000\
  BANG\000\
  QUESTION\000\
  PIPE\000\
  DOT\000\
  ZERO\000\
  SELECT\000\
  LBR\000\
  RBR\000\
  LPAR\000\
  RPAR\000\
  COMMA\000\
  TRUE\000\
  FALSE\000\
  DBLPIPE\000\
  VOID\000\
  AND\000\
  OR\000\
  NOT\000\
  DEQ\000\
  NEQ\000\
  IMPLIES\000\
  EQUIV\000\
  REVEAL\000\
  LT\000\
  GT\000\
  LPARR\000\
  RPARR\000\
  TAU\000\
  STAR\000\
  FRESH\000\
  HIDDEN\000\
  REVEALALL\000\
  FREE\000\
  EXISTS\000\
  FORALL\000\
  MAXFIX\000\
  MINFIX\000\
  ALWAYS\000\
  EVENTUALLY\000\
  INSIDE\000\
  SHOW_F\000\
  SHOW_S\000\
  DEFPROC\000\
  EQ\000\
  DEFPROP\000\
  CONV\000\
  DEFARROW\000\
  PI\000\
  SL\000\
  CDL\000\
  CHECK\000\
  PROCS\000\
  PROPS\000\
  SAT\000\
  CD\000\
  PD\000\
  TRACE\000\
  ON\000\
  OFF\000\
  PRINT\000\
  SHOW\000\
  QUIT\000\
  SEMI\000\
  LOAD\000\
  HELP\000\
  CLEAR\000\
  PARAM\000\
  MT\000\
  CC\000\
  ST\000\
  DEFC\000\
  CTX\000\
  JOIN\000\
  UPC\000\
  SWITCH\000\
  IF\000\
  THEN\000\
  ELSE\000\
  THIS\000\
  END\000\
  CHOICE\000\
  EXCHANGE\000\
  EOF\000\
  "

let yynames_block = "\
  ID\000\
  CAPS_ID\000\
  FILENAME\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'def_proc) in
    Obj.repr(
# 48 "mcparser.mly"
                       ( Mcmenu.Defproc(_1) )
# 746 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'def_prop) in
    Obj.repr(
# 49 "mcparser.mly"
                       ( Mcmenu.Defprop(_1) )
# 753 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'check) in
    Obj.repr(
# 50 "mcparser.mly"
                       ( Mcmenu.Check(_1) )
# 760 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 51 "mcparser.mly"
                       ( Mcmenu.DefMaxThreads(_3) )
# 767 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    Obj.repr(
# 52 "mcparser.mly"
                       ( Mcmenu.PrintMaxThreads )
# 773 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    Obj.repr(
# 53 "mcparser.mly"
                       ( Mcmenu.DefCheckCounter(true) )
# 779 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "mcparser.mly"
                       ( Mcmenu.DefCheckCounter(false) )
# 785 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "mcparser.mly"
                       ( Mcmenu.PrintCheckCounter )
# 791 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "mcparser.mly"
                       ( Mcmenu.DefShowTime(true) )
# 797 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "mcparser.mly"
                       ( Mcmenu.DefShowTime(false) )
# 803 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "mcparser.mly"
                       ( Mcmenu.PrintShowTime )
# 809 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "mcparser.mly"
                       ( Mcmenu.ListParams )
# 815 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 60 "mcparser.mly"
                       ( Mcmenu.CD(_2) )
# 822 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "mcparser.mly"
                       ( Mcmenu.PD )
# 828 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "mcparser.mly"
                       ( Mcmenu.PrintTrace )
# 834 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "mcparser.mly"
                       ( Mcmenu.DefTrace(true) )
# 840 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "mcparser.mly"
                       ( Mcmenu.DefTrace(false) )
# 846 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 65 "mcparser.mly"
                       ( Mcmenu.Load(_2) )
# 853 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "mcparser.mly"
                       ( Mcmenu.Clear )
# 859 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 67 "mcparser.mly"
                       ( Mcmenu.ShowProc(_2) )
# 866 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 68 "mcparser.mly"
                       ( Mcmenu.ShowProp(_2) )
# 873 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "mcparser.mly"
                       ( Mcmenu.PrintProcs )
# 879 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "mcparser.mly"
                       ( Mcmenu.PrintProps )
# 885 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "mcparser.mly"
                       ( Mcmenu.Help )
# 891 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "mcparser.mly"
                       ( Mcmenu.Continue )
# 897 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "mcparser.mly"
                       ( Mcmenu.Done )
# 903 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "mcparser.mly"
                       ( Mcmenu.Done )
# 909 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "mcparser.mly"
                       ( raise (Checker.ErrorMsg ("defproc\ndefprop\ncheck\nparameter\nlist\nshow\nload\ncd\npd\n"^
                                                  "trace\nclear\nhelp\nquit")) )
# 916 "mcparser.ml"
               : Mcmenu.menu))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'check_args) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'form) in
    Obj.repr(
# 80 "mcparser.mly"
                                      ( (_2,_3,_5) )
# 925 "mcparser.ml"
               : 'check))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'check_args) in
    Obj.repr(
# 81 "mcparser.mly"
                                       ( raise (Checker.ErrorMsg "<FORMULA>") )
# 933 "mcparser.ml"
               : 'check))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 82 "mcparser.mly"
                        ( raise (Checker.ErrorMsg "|=\n(") )
# 940 "mcparser.ml"
               : 'check))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "mcparser.mly"
                ( raise (Checker.ErrorMsg "<PROCESS IDENTIFIER>") )
# 946 "mcparser.ml"
               : 'check))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'proc_cc) in
    Obj.repr(
# 88 "mcparser.mly"
        ( Mcmenu.CCProcdec(Ccdec(_3,_4,_6)) )
# 955 "mcparser.ml"
               : 'def_proc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'proc) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'ands) in
    Obj.repr(
# 89 "mcparser.mly"
                                            ( let (r1,r2,r3) = _7 in Mcmenu.PIProcdec(Pidec(_3::r1,_4::r2, _6::r3)) )
# 965 "mcparser.ml"
               : 'def_proc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'params) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'proc) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'ands) in
    Obj.repr(
# 90 "mcparser.mly"
                                         ( let (r1,r2,r3) = _6 in Mcmenu.PIProcdec(Pidec(_2::r1,_3::r2, _5::r3)) )
# 975 "mcparser.ml"
               : 'def_proc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'params) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'proc) in
    Obj.repr(
# 91 "mcparser.mly"
                                         ( raise (Checker.ErrorMsg "and\n;\n|") )
# 984 "mcparser.ml"
               : 'def_proc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    Obj.repr(
# 92 "mcparser.mly"
                                    ( raise (Checker.ErrorMsg "<PROCESS>") )
# 992 "mcparser.ml"
               : 'def_proc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 93 "mcparser.mly"
                          (raise (Checker.ErrorMsg "=\n(") )
# 999 "mcparser.ml"
               : 'def_proc))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "mcparser.mly"
                  ( raise (Checker.ErrorMsg "<PROCESS IDENTIFIER>") )
# 1005 "mcparser.ml"
               : 'def_proc))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "mcparser.mly"
    ( ([], [], []) )
# 1011 "mcparser.ml"
               : 'ands))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'ands) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'proc) in
    Obj.repr(
# 99 "mcparser.mly"
                                    ( let (r1,r2,r3) = _1 in (_3::r1,_4::r2,_6::r3) )
# 1021 "mcparser.ml"
               : 'ands))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'ands) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    Obj.repr(
# 100 "mcparser.mly"
                                     ( raise (Checker.ErrorMsg "<PROCESS>") )
# 1030 "mcparser.ml"
               : 'ands))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'ands) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 101 "mcparser.mly"
                           ( raise (Checker.ErrorMsg "=\n(") )
# 1038 "mcparser.ml"
               : 'ands))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "mcparser.mly"
                  ( [] )
# 1044 "mcparser.ml"
               : 'params))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "mcparser.mly"
                  ( [] )
# 1050 "mcparser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'param_ids) in
    Obj.repr(
# 107 "mcparser.mly"
                        ( List.rev _2 )
# 1057 "mcparser.ml"
               : 'params))
; (fun __caml_parser_env ->
    Obj.repr(
# 108 "mcparser.mly"
                  ( raise (Checker.ErrorMsg "<ID> [,<ID>]*\n)") )
# 1063 "mcparser.ml"
               : 'params))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "mcparser.mly"
    ( [] )
# 1069 "mcparser.ml"
               : 'check_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'check_ids) in
    Obj.repr(
# 113 "mcparser.mly"
                        (List.rev _2 )
# 1076 "mcparser.ml"
               : 'check_args))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "mcparser.mly"
                  ( raise (Checker.ErrorMsg "<ID> [,<ID>]*\n)") )
# 1082 "mcparser.ml"
               : 'check_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_proc) in
    Obj.repr(
# 121 "mcparser.mly"
                    ( _1 )
# 1089 "mcparser.ml"
               : 'proc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'proc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_proc) in
    Obj.repr(
# 122 "mcparser.mly"
                          ( ref (Par(_1,_3)) )
# 1097 "mcparser.ml"
               : 'proc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'proc) in
    Obj.repr(
# 123 "mcparser.mly"
                    ( raise (Checker.ErrorMsg "<PROCESS>") )
# 1104 "mcparser.ml"
               : 'proc))
; (fun __caml_parser_env ->
    Obj.repr(
# 128 "mcparser.mly"
    ( ref (Piastnode.Void) )
# 1110 "mcparser.ml"
               : 'simple_proc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_args) in
    Obj.repr(
# 131 "mcparser.mly"
    (
     ref (Var(_1,_2))
    )
# 1120 "mcparser.ml"
               : 'simple_proc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'res_ids) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_proc) in
    Obj.repr(
# 136 "mcparser.mly"
    (
     List.iter 
       (fun id -> 
	 if (Hashtbl.find usage id)=0 then 
	   (
	    print_string "Warning: Unused restricted name ";
	    print_string id;
	    print_newline())
	 else 
	   Hashtbl.remove usage id) 
       _2; 
     ref (New(List.rev _2, _4)) )
# 1139 "mcparser.ml"
               : 'simple_proc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'inp_ids) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'simple_proc) in
    Obj.repr(
# 150 "mcparser.mly"
    (
     (if Hashtbl.mem usage _1 then 
       Hashtbl.replace usage _1 1);
     List.iter (fun id -> Hashtbl.remove usage id) _4;
     ref (Act(Input(_1, List.rev _4), _7)) )
# 1152 "mcparser.ml"
               : 'simple_proc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'inp_ids) in
    Obj.repr(
# 157 "mcparser.mly"
    (
     (if Hashtbl.mem usage _1 then 
       Hashtbl.replace usage _1 1);
     List.iter (fun id -> Hashtbl.remove usage id) _4;
     ref (Act(Input(_1, List.rev _4), (ref Piastnode.Void))) )
# 1164 "mcparser.ml"
               : 'simple_proc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'out_ids) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'simple_proc) in
    Obj.repr(
# 164 "mcparser.mly"
    (
     (if Hashtbl.mem usage _1 then 
       Hashtbl.replace usage _1 1);
     ref (Act(Output(_1, List.rev _4), _7)) )
# 1176 "mcparser.ml"
               : 'simple_proc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'out_ids) in
    Obj.repr(
# 170 "mcparser.mly"
    (
     (if Hashtbl.mem usage _1 then 
       Hashtbl.replace usage _1 1);
     ref (Act(Output(_1, List.rev _4), (ref Piastnode.Void))) )
# 1187 "mcparser.ml"
               : 'simple_proc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_proc) in
    Obj.repr(
# 176 "mcparser.mly"
    (
     ref(Act(Tau,_3)))
# 1195 "mcparser.ml"
               : 'simple_proc))
; (fun __caml_parser_env ->
    Obj.repr(
# 180 "mcparser.mly"
    (
     ref(Act(Tau,ref Piastnode.Void)))
# 1202 "mcparser.ml"
               : 'simple_proc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'simple_proc) in
    Obj.repr(
# 184 "mcparser.mly"
    ( 
     (if Hashtbl.mem usage _2 then 
       Hashtbl.replace usage _2 1);
     (if Hashtbl.mem usage _4 then 
       Hashtbl.replace usage _4 1);
      ref (Test(_2,_4,_7,Equals)) )
# 1216 "mcparser.ml"
               : 'simple_proc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'simple_proc) in
    Obj.repr(
# 192 "mcparser.mly"
    ( 
     (if Hashtbl.mem usage _2 then 
       Hashtbl.replace usage _2 1);
     (if Hashtbl.mem usage _4 then 
       Hashtbl.replace usage _4 1);
      ref (Test(_2,_4,_7,Differs)) )
# 1230 "mcparser.ml"
               : 'simple_proc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'sum) in
    Obj.repr(
# 200 "mcparser.mly"
    ( _3 )
# 1237 "mcparser.ml"
               : 'simple_proc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'proc) in
    Obj.repr(
# 203 "mcparser.mly"
    ( _2 )
# 1244 "mcparser.ml"
               : 'simple_proc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'inp_ids) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'simple_proc) in
    Obj.repr(
# 208 "mcparser.mly"
    (
     (if Hashtbl.mem usage _1 then 
       Hashtbl.replace usage _1 1);
     List.iter (fun id -> Hashtbl.remove usage id) _4;
     ref (Act(Input(_1, List.rev _4), _7)) )
# 1257 "mcparser.ml"
               : 'act_sum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'inp_ids) in
    Obj.repr(
# 214 "mcparser.mly"
    (
     (if Hashtbl.mem usage _1 then 
       Hashtbl.replace usage _1 1);
     List.iter (fun id -> Hashtbl.remove usage id) _4;
     ref (Act(Input(_1, List.rev _4), (ref Piastnode.Void))) )
# 1269 "mcparser.ml"
               : 'act_sum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'out_ids) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'simple_proc) in
    Obj.repr(
# 221 "mcparser.mly"
    (
     (if Hashtbl.mem usage _1 then 
       Hashtbl.replace usage _1 1);
     ref (Act(Output(_1, List.rev _4), _7)) )
# 1281 "mcparser.ml"
               : 'act_sum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'out_ids) in
    Obj.repr(
# 226 "mcparser.mly"
    (
     (if Hashtbl.mem usage _1 then 
       Hashtbl.replace usage _1 1);
     ref (Act(Output(_1, List.rev _4), (ref Piastnode.Void))) )
# 1292 "mcparser.ml"
               : 'act_sum))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_proc) in
    Obj.repr(
# 231 "mcparser.mly"
    (
     ref(Act(Tau,_3)))
# 1300 "mcparser.ml"
               : 'act_sum))
; (fun __caml_parser_env ->
    Obj.repr(
# 234 "mcparser.mly"
    (
     ref(Act(Tau,ref Piastnode.Void)))
# 1307 "mcparser.ml"
               : 'act_sum))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'simple_proc) in
    Obj.repr(
# 237 "mcparser.mly"
    ( 
     (if Hashtbl.mem usage _2 then 
       Hashtbl.replace usage _2 1);
     (if Hashtbl.mem usage _4 then 
       Hashtbl.replace usage _4 1);
      ref (Test(_2,_4,_7,Equals)) )
# 1321 "mcparser.ml"
               : 'act_sum))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'simple_proc) in
    Obj.repr(
# 244 "mcparser.mly"
    ( 
     (if Hashtbl.mem usage _2 then 
       Hashtbl.replace usage _2 1);
     (if Hashtbl.mem usage _4 then 
       Hashtbl.replace usage _4 1);
      ref (Test(_2,_4,_7,Differs)) )
# 1335 "mcparser.ml"
               : 'act_sum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'act_sum) in
    Obj.repr(
# 253 "mcparser.mly"
    ( _1 )
# 1342 "mcparser.ml"
               : 'sum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'sum) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'act_sum) in
    Obj.repr(
# 255 "mcparser.mly"
    ( ref (Sum(_1,_3)) )
# 1350 "mcparser.ml"
               : 'sum))
; (fun __caml_parser_env ->
    Obj.repr(
# 259 "mcparser.mly"
    ( [] )
# 1356 "mcparser.ml"
               : 'id_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'out_ids) in
    Obj.repr(
# 260 "mcparser.mly"
                      (List.rev _2 )
# 1363 "mcparser.ml"
               : 'id_args))
; (fun __caml_parser_env ->
    Obj.repr(
# 264 "mcparser.mly"
    ( [] )
# 1369 "mcparser.ml"
               : 'check_ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 266 "mcparser.mly"
    ( [_1] )
# 1376 "mcparser.ml"
               : 'check_ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'check_ids) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 268 "mcparser.mly"
    ( _3::_1 )
# 1384 "mcparser.ml"
               : 'check_ids))
; (fun __caml_parser_env ->
    Obj.repr(
# 273 "mcparser.mly"
    ( [] )
# 1390 "mcparser.ml"
               : 'inp_ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 275 "mcparser.mly"
    (
     Hashtbl.clear names;
     Hashtbl.add names _1 0;
     Hashtbl.add usage _1 0; 
     [_1]
    )
# 1402 "mcparser.ml"
               : 'inp_ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'inp_ids) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 282 "mcparser.mly"
    (
     if Hashtbl.mem names _3 then
       (print_string "Repeated name in input ";
	print_string _3;
	print_newline();
	raise Parsing.Parse_error)
     else
       (Hashtbl.add names _3 0;
	Hashtbl.add usage _3 0; 
	_3::_1))
# 1419 "mcparser.ml"
               : 'inp_ids))
; (fun __caml_parser_env ->
    Obj.repr(
# 295 "mcparser.mly"
    ( [] )
# 1425 "mcparser.ml"
               : 'out_ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 297 "mcparser.mly"
    ( 
      (if Hashtbl.mem usage _1 then 
	Hashtbl.replace usage _1 1);
      [_1]
    )
# 1436 "mcparser.ml"
               : 'out_ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'out_ids) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 303 "mcparser.mly"
    (
     (if Hashtbl.mem usage _3 then 
       Hashtbl.replace usage _3 1);
       _3::_1 )
# 1447 "mcparser.ml"
               : 'out_ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 311 "mcparser.mly"
    (
     Hashtbl.clear names;
     Hashtbl.add names _1 0;
     Hashtbl.add usage _1 0;
     [_1] )
# 1458 "mcparser.ml"
               : 'res_ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'res_ids) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 318 "mcparser.mly"
    (
     if Hashtbl.mem names _3 then
       (print_string "Repeated restricted name ";
	print_string _3;
	print_newline();
	raise Parsing.Parse_error)
     else
       (Hashtbl.add names _3 0;
	Hashtbl.add usage _3 0;
	_3::_1) )
# 1475 "mcparser.ml"
               : 'res_ids))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'dec_name) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'form) in
    Obj.repr(
# 331 "mcparser.mly"
                             ( Dec(_2, _4) )
# 1483 "mcparser.ml"
               : 'def_prop))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'dec_name) in
    Obj.repr(
# 332 "mcparser.mly"
                              ( raise (Checker.ErrorMsg "<FORMULA>") )
# 1490 "mcparser.ml"
               : 'def_prop))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dec_name) in
    Obj.repr(
# 333 "mcparser.mly"
                           ( raise (Checker.ErrorMsg "=\n(") )
# 1497 "mcparser.ml"
               : 'def_prop))
; (fun __caml_parser_env ->
    Obj.repr(
# 334 "mcparser.mly"
                  ( raise (Checker.ErrorMsg "<FORMULA IDENTIFIER>") )
# 1503 "mcparser.ml"
               : 'def_prop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'param_ids) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'props) in
    Obj.repr(
# 339 "mcparser.mly"
    ( (_1,List.rev _3,_5) )
# 1512 "mcparser.ml"
               : 'dec_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'param_ids) in
    Obj.repr(
# 341 "mcparser.mly"
    ( (_1,List.rev _3,[]) )
# 1520 "mcparser.ml"
               : 'dec_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'props) in
    Obj.repr(
# 343 "mcparser.mly"
    ( (_1,[],_3) )
# 1528 "mcparser.ml"
               : 'dec_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 345 "mcparser.mly"
    ( (_1,[],[]) )
# 1535 "mcparser.ml"
               : 'dec_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 347 "mcparser.mly"
    ( raise (Checker.ErrorMsg "<ID> [,<ID>]*\n<PROP_ID> [,<PROP_ID>]*\n<ID> [,<ID>]*, <PROP_ID> [,<PROP_ID>]*") )
# 1542 "mcparser.ml"
               : 'dec_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 352 "mcparser.mly"
    (
     Hashtbl.clear names;
     Hashtbl.add names _1 0;
     [_1]
    )
# 1553 "mcparser.ml"
               : 'param_ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_ids) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 358 "mcparser.mly"
    (
     if Hashtbl.mem names _3 then
       (print_string "Repeated parameter name ";
	print_string _3;
	print_newline();
	raise Parsing.Parse_error)
     else
       (Hashtbl.add names _3 0;
	_3::_1))
# 1569 "mcparser.ml"
               : 'param_ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 371 "mcparser.mly"
    ( 
      Hashtbl.clear names;
      Hashtbl.add names _1 0;
      [_1] 
    )
# 1580 "mcparser.ml"
               : 'props))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'props) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 377 "mcparser.mly"
    ( 
      if Hashtbl.mem names _3 then
	(print_string "Repeated propositional parameter name ";
	 print_string _3;
	 print_newline();
	 raise Parsing.Parse_error)
      else
	(Hashtbl.add names _3 0;
	 List.append _1 [_3]))
# 1596 "mcparser.ml"
               : 'props))
; (fun __caml_parser_env ->
    Obj.repr(
# 389 "mcparser.mly"
                 ( [] )
# 1602 "mcparser.ml"
               : 'label_ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 390 "mcparser.mly"
                 ( [_1] )
# 1609 "mcparser.ml"
               : 'label_ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'label_ids) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 391 "mcparser.mly"
                       ( _3::_1 )
# 1617 "mcparser.ml"
               : 'label_ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 395 "mcparser.mly"
                             ( _1 )
# 1624 "mcparser.ml"
               : 'form))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'form) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 396 "mcparser.mly"
                             ( Comp(_1,_3) )
# 1632 "mcparser.ml"
               : 'form))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'form) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 397 "mcparser.mly"
                             ( Decomp(_1,_3) )
# 1640 "mcparser.ml"
               : 'form))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'form) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 398 "mcparser.mly"
                             ( Implies(_1,_3) )
# 1648 "mcparser.ml"
               : 'form))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'form) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 399 "mcparser.mly"
                             ( Equiv(_1,_3) )
# 1656 "mcparser.ml"
               : 'form))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'form) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 400 "mcparser.mly"
                             ( And(_1,_3) )
# 1664 "mcparser.ml"
               : 'form))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'form) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 401 "mcparser.mly"
                             ( Or(_1,_3) )
# 1672 "mcparser.ml"
               : 'form))
; (fun __caml_parser_env ->
    Obj.repr(
# 406 "mcparser.mly"
    ( True )
# 1678 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    Obj.repr(
# 408 "mcparser.mly"
    ( False )
# 1684 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    Obj.repr(
# 410 "mcparser.mly"
    ( Formastnode.Void )
# 1690 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    Obj.repr(
# 412 "mcparser.mly"
    ( Formastnode.Void )
# 1696 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 414 "mcparser.mly"
    ( Formastnode.NumComps(_1,Formastnode.EqNum) )
# 1703 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    Obj.repr(
# 416 "mcparser.mly"
    ( Formastnode.NumComps(0,Formastnode.LtNum) )
# 1709 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 418 "mcparser.mly"
    ( Formastnode.NumComps(_2,Formastnode.LtNum) )
# 1716 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    Obj.repr(
# 420 "mcparser.mly"
    ( Formastnode.NumComps(0,Formastnode.GtNum) )
# 1722 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 422 "mcparser.mly"
    ( Formastnode.NumComps(_2,Formastnode.GtNum) )
# 1729 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fixpoint_args) in
    Obj.repr(
# 424 "mcparser.mly"
    ( PropVar(_1,_2) )
# 1737 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 426 "mcparser.mly"
    ( PropVar(_1,[]) )
# 1744 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 428 "mcparser.mly"
    ( Eq(_1,_3) )
# 1752 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 430 "mcparser.mly"
    ( Neq(_1,_3) )
# 1760 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args) in
    Obj.repr(
# 432 "mcparser.mly"
    ( Abbrev(_1, _3) )
# 1768 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 434 "mcparser.mly"
    ( Abbrev(_1, []) )
# 1775 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 436 "mcparser.mly"
    ( Not(_2) )
# 1782 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 438 "mcparser.mly"
    ( Reveal(_2,_4) )
# 1790 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 440 "mcparser.mly"
    ( RevealAll(_2,_4) )
# 1798 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 442 "mcparser.mly"
    ( Hidden(_2,_4) )
# 1806 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 444 "mcparser.mly"
    ( Fresh(_2,_4) )
# 1814 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 446 "mcparser.mly"
    ( Free(_2) )
# 1821 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tau) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 448 "mcparser.mly"
    ( MayTau(_4) )
# 1829 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tau) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 450 "mcparser.mly"
    ( AllTau(_4) )
# 1837 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'label) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 452 "mcparser.mly"
    ( MayLab(_2,_4) )
# 1845 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'label) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 454 "mcparser.mly"
    ( AllLab(_2,_4) )
# 1853 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 456 "mcparser.mly"
    ( MayOutN(_2,_5) )
# 1861 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 458 "mcparser.mly"
    ( MayInpN(_2,_5) )
# 1869 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 460 "mcparser.mly"
    ( AllOutN(_2,_5) )
# 1877 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 462 "mcparser.mly"
    ( AllInpN(_2,_5) )
# 1885 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 464 "mcparser.mly"
    ( MayOut(_4) )
# 1892 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 466 "mcparser.mly"
    ( MayInp(_4) )
# 1899 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 468 "mcparser.mly"
    ( AllOut(_4) )
# 1906 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 470 "mcparser.mly"
    ( AllInp(_4) )
# 1913 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 472 "mcparser.mly"
    ( MayN(_2,_4) )
# 1921 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 474 "mcparser.mly"
    ( AllN(_2,_4) )
# 1929 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 476 "mcparser.mly"
    ( May(_4) )
# 1936 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 478 "mcparser.mly"
    ( All(_4) )
# 1943 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 480 "mcparser.mly"
    ( Exists(_2,_4) )
# 1951 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 482 "mcparser.mly"
    ( ForAll(_2,_4) )
# 1959 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'fixpoint_args) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'simple_form) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'fixpoint_args) in
    Obj.repr(
# 484 "mcparser.mly"
    ( 
        MaxFix(_3,_4,_6,_8)
    )
# 1971 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 488 "mcparser.mly"
    ( 
        MaxFix(_2,[],_4,[])
    )
# 1981 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'fixpoint_args) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'simple_form) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'fixpoint_args) in
    Obj.repr(
# 492 "mcparser.mly"
    (
        MinFix(_3,_4,_6,_8)
    )
# 1993 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 496 "mcparser.mly"
    ( 
        MinFix(_2,[],_4,[])
    )
# 2003 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 500 "mcparser.mly"
    ( Eventually(_2) )
# 2010 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 502 "mcparser.mly"
    ( Always(_2) )
# 2017 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 504 "mcparser.mly"
    ( Inside(_2) )
# 2024 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 506 "mcparser.mly"
    ( Show_f(_2) )
# 2031 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_form) in
    Obj.repr(
# 508 "mcparser.mly"
    ( Show_s(_2) )
# 2038 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'form) in
    Obj.repr(
# 510 "mcparser.mly"
    ( _2 )
# 2045 "mcparser.ml"
               : 'simple_form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'label_ids) in
    Obj.repr(
# 515 "mcparser.mly"
    ( List.rev _2 )
# 2052 "mcparser.ml"
               : 'fixpoint_args))
; (fun __caml_parser_env ->
    Obj.repr(
# 519 "mcparser.mly"
                 ( [] )
# 2058 "mcparser.ml"
               : 'label_ids_uscore))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 520 "mcparser.mly"
                 ( [_1] )
# 2065 "mcparser.ml"
               : 'label_ids_uscore))
; (fun __caml_parser_env ->
    Obj.repr(
# 521 "mcparser.mly"
                 ( ["_"] )
# 2071 "mcparser.ml"
               : 'label_ids_uscore))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'label_ids_uscore) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 522 "mcparser.mly"
                              ( _3::_1 )
# 2079 "mcparser.ml"
               : 'label_ids_uscore))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'label_ids_uscore) in
    Obj.repr(
# 523 "mcparser.mly"
                                  ( "_"::_1 )
# 2086 "mcparser.ml"
               : 'label_ids_uscore))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'label_ids) in
    Obj.repr(
# 528 "mcparser.mly"
                                    ( InpLab(_1,List.rev _4) )
# 2094 "mcparser.ml"
               : 'label))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'label_ids_uscore) in
    Obj.repr(
# 529 "mcparser.mly"
                                       ( OutLab(_1,List.rev _4) )
# 2102 "mcparser.ml"
               : 'label))
; (fun __caml_parser_env ->
    Obj.repr(
# 533 "mcparser.mly"
        ( )
# 2108 "mcparser.ml"
               : 'tau))
; (fun __caml_parser_env ->
    Obj.repr(
# 534 "mcparser.mly"
        ( )
# 2114 "mcparser.ml"
               : 'tau))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'form) in
    Obj.repr(
# 538 "mcparser.mly"
                    ( [_1] )
# 2121 "mcparser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'form) in
    Obj.repr(
# 539 "mcparser.mly"
                    ( List.append _1 [_3] )
# 2129 "mcparser.ml"
               : 'args))
; (fun __caml_parser_env ->
    Obj.repr(
# 545 "mcparser.mly"
    ( CCInact )
# 2135 "mcparser.ml"
               : 'cc_simple_proc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_args) in
    Obj.repr(
# 547 "mcparser.mly"
    (
     CCVar(_1,_2)
    )
# 2145 "mcparser.ml"
               : 'cc_simple_proc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'proc_cc) in
    Obj.repr(
# 550 "mcparser.mly"
                           ( CCCxt(_2,_4) )
# 2153 "mcparser.ml"
               : 'cc_simple_proc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cc_input) in
    Obj.repr(
# 551 "mcparser.mly"
             ( _1 )
# 2160 "mcparser.ml"
               : 'cc_simple_proc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'out_ids) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'cc_simple_proc) in
    Obj.repr(
# 552 "mcparser.mly"
                                                 ( CCAct(CCOutput(Here,_1,List.rev _4),_7) )
# 2169 "mcparser.ml"
               : 'cc_simple_proc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'out_ids) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'cc_simple_proc) in
    Obj.repr(
# 553 "mcparser.mly"
                                                     ( CCAct(CCOutput(Up,_1,List.rev _5),_8) )
# 2178 "mcparser.ml"
               : 'cc_simple_proc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'cc_simple_proc) in
    Obj.repr(
# 554 "mcparser.mly"
                                   ( CCDef(_2,_4) )
# 2186 "mcparser.ml"
               : 'cc_simple_proc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'cc_simple_proc) in
    Obj.repr(
# 555 "mcparser.mly"
                                          ( CCNew(_2,_4,_6) )
# 2195 "mcparser.ml"
               : 'cc_simple_proc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'cc_simple_proc) in
    Obj.repr(
# 556 "mcparser.mly"
                                           ( CCJoin(_2,_4,_6) )
# 2204 "mcparser.ml"
               : 'cc_simple_proc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'cc_branches) in
    Obj.repr(
# 557 "mcparser.mly"
                               ( CCSum(List.rev _3) )
# 2211 "mcparser.ml"
               : 'cc_simple_proc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'cc_simple_proc) in
    Obj.repr(
# 558 "mcparser.mly"
                                         ( CCThis(_3,_6) )
# 2219 "mcparser.ml"
               : 'cc_simple_proc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'cc_simple_proc) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'cc_simple_proc) in
    Obj.repr(
# 559 "mcparser.mly"
                                                                  ( CCIfThenElse(_8,_10) )
# 2229 "mcparser.ml"
               : 'cc_simple_proc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'cc_simple_proc) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'cc_simple_proc) in
    Obj.repr(
# 560 "mcparser.mly"
                                                                   ( CCIfThenElse(_8,_10) )
# 2239 "mcparser.ml"
               : 'cc_simple_proc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'proc_cc) in
    Obj.repr(
# 561 "mcparser.mly"
                      ( _2 )
# 2246 "mcparser.ml"
               : 'cc_simple_proc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'inp_ids) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'cc_simple_proc) in
    Obj.repr(
# 565 "mcparser.mly"
                                                    ( CCAct(CCInput(Here,_1, List.rev _4),_7) )
# 2255 "mcparser.ml"
               : 'cc_input))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'inp_ids) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'cc_simple_proc) in
    Obj.repr(
# 566 "mcparser.mly"
                                                        ( CCAct(CCInput(Up,_1, List.rev _5),_8) )
# 2264 "mcparser.ml"
               : 'cc_input))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cc_input) in
    Obj.repr(
# 570 "mcparser.mly"
           ( [_1] )
# 2271 "mcparser.ml"
               : 'cc_branches))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cc_branches) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cc_input) in
    Obj.repr(
# 571 "mcparser.mly"
                             ( _3::_1 )
# 2279 "mcparser.ml"
               : 'cc_branches))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cc_simple_proc) in
    Obj.repr(
# 575 "mcparser.mly"
                       ( _1 )
# 2286 "mcparser.ml"
               : 'proc_cc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'proc_cc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cc_simple_proc) in
    Obj.repr(
# 576 "mcparser.mly"
                                ( CCPar(_1,_3) )
# 2294 "mcparser.ml"
               : 'proc_cc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'proc_cc) in
    Obj.repr(
# 577 "mcparser.mly"
                       ( raise (Checker.ErrorMsg "<PROCESS>") )
# 2301 "mcparser.ml"
               : 'proc_cc))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Mcmenu.menu)
